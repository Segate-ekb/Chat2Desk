////////////////////////////////////////////////////////////////////////////////
// Модуль для обработки стандартного вебхука от Chat2desk
// Обрабатывает post запрос от chat2desk 
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

Функция БазовыйUrlPOST(Запрос)
	//Все данные от c2d приходят в теле запроса. попытаемся их извлечь, Если не получится отдадим ошибку и завершим
	Попытка
		//Забираем тело запроса
		ТелоЗапроса = C2D_ВзаимодействиеСApiСлужебный.ДесериализоватьJSON(Запрос.ПолучитьТелоКакСтроку());
	Исключение
		РегистрыСведений.C2D_ЛогиОбработкиWebHook.ЗаписатьСобытиеВЛог(новый соответствие, "Unable to extract request body");
		//Ошибка при десерализации тела запроса
		Возврат Новый HTTPСервисОтвет(500, "Unable to extract request body");
	КонецПопытки;
	//получили тело запроса, обработаем его. на выходе из функции всегда HTTP ответ
	Ответ = ОбработатьХук(ТелоЗапроса); 
	Возврат Ответ;
КонецФункции

Функция БазовыйUrlGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("{status:success}");
	Возврат Ответ;
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ОбработатьХук(ТелоЗапроса)
	Ответ = Новый HTTPСервисОтвет(200, "Success");
	
	//Определим тип события
	ТипСобытия = ТелоЗапроса.Получить("hook_type");
	Если не ЗначениеЗаполнено(ТипСобытия) Тогда
		РегистрыСведений.C2D_ЛогиОбработкиWebHook.ЗаписатьСобытиеВЛог(ТелоЗапроса, "Unable to get hook_type");
		Возврат Новый HTTPСервисОтвет(500, "Unable to get hook_type");
	КонецЕсли; 
	
	//Обработаем тип события
	ОбработатьЗапросВЗависимостиОтТипа(ТелоЗапроса, ТипСобытия, Ответ);
	Возврат Ответ;
КонецФункции

Процедура ОбработатьЗапросВЗависимостиОтТипа(ТелоЗапроса, ТипСобытия, Ответ)
	Попытка
		Выполнить(ТипСобытия+"(ТелоЗапроса, Ответ)");
		Если  ответ.КодСостояния = 200 Тогда
			РегистрыСведений.C2D_ЛогиОбработкиWebHook.ЗаписатьСобытиеВЛог(ТелоЗапроса, ТипСобытия, истина);
		Иначе
			ВызватьИсключение "!!!";
		КонецЕсли; 
	Исключение
		//Не найдена процедура для обработки хука. вернем ошибку
		Ответ = Новый HTTPСервисОтвет(500, "Unable to get method for """+ТипСобытия+""" hook_type");
		РегистрыСведений.C2D_ЛогиОбработкиWebHook.ЗаписатьСобытиеВЛог(ТелоЗапроса, ТипСобытия);
	КонецПопытки; 	
КонецПроцедуры
#КонецОбласти

#Область ПроцедурыОбработкиТиповыхХуков
//Типы хуков:
//"inbox",
//"outbox",
//"new_tag",
//"new_client",
//"new_request",
//"close_dialog",
//"client_updated",
//"add_tag_to_client",
//"add_tag_to_request",
//"dialog_transferred",
//"delete_tag_from_client"
//Типовой хук подписан на все эти события и необходим обработчик под каждый из типов.

Процедура Inbox(ТелоЗапроса, Ответ)
	Попытка
		РегистрыСведений.C2D_Сообщения.ЗаписатьИнформациюОНовомСообщении(ТелоЗапроса);
	Исключение
		Ответ = Новый HTTPСервисОтвет(500, "Unexpected error in ""Inbox"" hook_type");
	КонецПопытки;	
КонецПроцедуры

Процедура Outbox(ТелоЗапроса, Ответ)
	Попытка
		РегистрыСведений.C2D_Сообщения.ЗаписатьИнформациюОНовомСообщении(ТелоЗапроса);
	Исключение
		Ответ = Новый HTTPСервисОтвет(500, "Unexpected error in ""Outbox"" hook_type");
	КонецПопытки;		
КонецПроцедуры

// Процедура - New client
// Процедура для обработки хука New_client, создает или нового клиента.
// Параметры:
//  ТелоЗапроса	 - Соответствие	 - Пакет данных прилетевший хуком. Пример пакета - в комментарии внизу области.
//  Ответ		 - HTTPСервисОтвет	 - переменная которую нужно сформировать по результатам обработки
//
Процедура New_client(ТелоЗапроса, Ответ)
	Попытка
		РегистрыСведений.C2D_Клиенты.СоздатьИлиОбновитьДанныеОКлиенте(ТелоЗапроса);
		РегистрыСведений.C2D_ТранспортыКлиентов.ДобавитьТранспортыКлиенту(ТелоЗапроса.получить("id"), ТелоЗапроса.получить("channels"));
	Исключение
		Ответ = Новый HTTPСервисОтвет(500, "Unexpected error in ""New_client"" hook_type");
	КонецПопытки;	
КонецПроцедуры

Процедура Client_updated(ТелоЗапроса, Ответ)
	Попытка
		РегистрыСведений.C2D_Клиенты.СоздатьИлиОбновитьДанныеОКлиенте(ТелоЗапроса);
		РегистрыСведений.C2D_ТранспортыКлиентов.ДобавитьТранспортыКлиенту(ТелоЗапроса.получить("id"), ТелоЗапроса.получить("channels"));
	Исключение
		Ответ = Новый HTTPСервисОтвет(500, "Unexpected error in ""Client_updated"" hook_type");
	КонецПопытки;	
КонецПроцедуры

// Процедура - New request
// Процедура для обработки хука new_request, создает или новый диалог или переоткрывает старый.
// Параметры:
//  ТелоЗапроса	 - Соответствие	 - Пакет данных прилетевший хуком. Пример пакета - в комментарии внизу области.
//  Ответ		 - HTTPСервисОтвет	 - переменная которую нужно сформировать по результатам обработки
//
Процедура New_request(ТелоЗапроса, Ответ)
	Попытка
		РегистрыСведений.C2D_Диалоги.СоздатьИлиОткрытьДиалог(ТелоЗапроса);	
	Исключение
		Ответ = Новый HTTPСервисОтвет(500, "Unexpected error in ""New_request"" hook_type");
	КонецПопытки;	
КонецПроцедуры

Процедура Close_dialog(ТелоЗапроса, Ответ)
	Попытка
		РегистрыСведений.C2D_Диалоги.ЗакрытьДиалог(ТелоЗапроса);	
	Исключение
		Ответ = Новый HTTPСервисОтвет(500, "Unexpected error in ""Close_dialog"" hook_type");
	КонецПопытки;	
КонецПроцедуры

Процедура Dialog_transferred(ТелоЗапроса, Ответ)
	Попытка
		РегистрыСведений.C2D_Диалоги.ПеренестиДиалогДругомуОператору(ТелоЗапроса);	
	Исключение
		Ответ = Новый HTTPСервисОтвет(500, "Unexpected error in ""Dialog_transferred"" hook_type");
	КонецПопытки;	
КонецПроцедуры

Процедура New_tag(ТелоЗапроса, Ответ)
		
КонецПроцедуры

Процедура Add_tag_to_client(ТелоЗапроса, Ответ)
		
КонецПроцедуры

Процедура Add_tag_to_request(ТелоЗапроса, Ответ)
		
КонецПроцедуры

Процедура Delete_tag_from_client(ТелоЗапроса, Ответ)
		
КонецПроцедуры

Процедура Delete_tag_from_request(ТелоЗапроса, Ответ)
		
КонецПроцедуры
#КонецОбласти