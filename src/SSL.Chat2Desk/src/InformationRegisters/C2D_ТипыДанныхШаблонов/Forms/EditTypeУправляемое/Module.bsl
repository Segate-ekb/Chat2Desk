

// вспомогательные процедуры и функции

&НаСервереБезКонтекста
Функция ВычислитьНаСервереБезКонтекста(СтрФормула)
	Если ПустаяСтрока(СтрФормула) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Вычислить(СтрФормула);
	КонецЕсли; 
КонецФункции

&НаСервереБезКонтекста
Функция РежимСовместимостиРавен(РежимИмя)
	Попытка
		РежимК = Метаданные.РежимСовместимости;
		Режимы = Метаданные.СвойстваОбъектов.РежимСовместимости;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Если ПустаяСтрока(РежимИмя) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Попытка
		Возврат РежимК = Режимы[РежимИмя];
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьАсинхронныеМетоды(МодальностьРазрешена=Неопределено)
	Попытка
		Режимы = Метаданные.СвойстваОбъектов.РежимИспользованияМодальности;
		Режим = Метаданные.РежимИспользованияМодальности;
		ТестРежимов = (Режим = Режимы.Использовать И Режим = Режимы.ИспользоватьСПредупреждениями И Режим = Режимы.НеИспользовать);
		МодальностьРазрешена = (Режим = Режимы.Использовать);
		Возврат Истина;
	Исключение
		МодальностьРазрешена = Истина;
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипIf(ИмяТипа)
	Попытка
		ТипаIf = Тип(ИмяТипа);
	Исключение
		ТипаIf = Null;
	КонецПопытки;
	Возврат ТипаIf;
КонецФункции

Функция ДеревоТиповРежимПоиска2СтрокаПоиска()
	Возврат НСтр("ru = '<Только отмеченные строки в списке типов>'; en = '<Only marked rows in the data type''s list>'");
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция КартинкаПоИмени(Имя,Знач ИменаАльт)
	Картинка = Неопределено;
	Если НЕ ПустаяСтрока(Имя) Тогда
		Попытка
			Картинка = БиблиотекаКартинок[Имя];
		Исключение
		КонецПопытки;
	КонецЕсли; 
	Если Картинка = Неопределено И НЕ ПустаяСтрока(ИменаАльт) Тогда
		ИменаАльт = СтрЗаменить(ИменаАльт,",",";");
		ИменаАльт = СтрЗаменить(ИменаАльт,";",Символы.ПС);
		Для о = 1 По СтрЧислоСтрок(ИменаАльт) Цикл
			ИмяАльт = СтрПолучитьСтроку(ИменаАльт,о);
			Попытка
				Картинка = БиблиотекаКартинок[ИмяАльт];
			Исключение
			КонецПопытки;
			Если Картинка <> Неопределено Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Если Картинка = Неопределено Тогда
		Картинка = Новый Картинка;
	КонецЕсли; 
	Возврат Картинка;
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаТиповДобавить(ТТСтроки,ЭтоГруппа,ТипКод,Тип,МетаТип,Картинка,Имя,Синоним,ОтборТипов,ТекущиеТипы,ПометкаТипов,НПП)
	Если ЭтоГруппа <> Истина И ОтборТипов <> Неопределено И ОтборТипов.СодержитТип(Тип) <> Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	НПП = НПП + 1;
	Если ТекущиеТипы = Неопределено Тогда
		Метка0 = 0;
	Иначе
		Если ЭтоГруппа = Истина Тогда
			Метка0 = 0;
		Иначе
			Метка0 = ?(ТекущиеТипы.СодержитТип(Тип), 1, 0);
		КонецЕсли;
	КонецЕсли; 
	Если ПометкаТипов = Неопределено Тогда
		Метка = Метка0;
	Иначе
		Если ЭтоГруппа = Истина Тогда
			Метка = 0;
		Иначе
			Метка = ?(ПометкаТипов.СодержитТип(Тип), 1, 0);
		КонецЕсли;
	КонецЕсли; 
	СтрТТ = ТТСтроки.Добавить();
	СтрТТ.ЭтоГруппа = (ЭтоГруппа = Истина);
	СтрТТ.ТипКод = ТипКод;
	СтрТТ.Тип = Тип;
	СтрТТ.МетаТип = МетаТип;
	СтрТТ.Картинка = Картинка;
	СтрТТ.Имя = Имя;
	СтрТТ.Синоним = Синоним;
	СтрТТ.Метка = Метка;
	СтрТТ.Метка0 = Метка0;
	СтрТТ.НПП = НПП;
	Возврат СтрТТ;
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаТиповИнит(стПараметры,НППМаксимальныйПометка,мсВсеТипы)
	Перем ЭтоДерево;
	Перем ОтборТипов;
	Перем ПоказыватьТипBD;
	Перем ПоказыватьКонстанты;
	Перем ПоказыватьОтчетыОбработки;
	Перем ПоказыватьРегистры;
	Перем КраткиеИменаГруппТипов;
	Перем ТекущиеТипы;
	Перем ПометкаТипов;
	Перем ВыводитьПустыеГруппыТипов;
	// инициализация параметров таблицы типов
	Если ТипЗнч(стПараметры) = Тип("Структура") Тогда
		стПараметры.Свойство("ЭтоДерево",ЭтоДерево);
		стПараметры.Свойство("ОтборТипов",ОтборТипов);
		стПараметры.Свойство("ПоказыватьТипBD",ПоказыватьТипBD);
		стПараметры.Свойство("ПоказыватьКонстанты",ПоказыватьКонстанты);
		стПараметры.Свойство("ПоказыватьОтчетыОбработки",ПоказыватьОтчетыОбработки);
		стПараметры.Свойство("ПоказыватьРегистры",ПоказыватьРегистры);
		стПараметры.Свойство("КраткиеИменаГруппТипов",КраткиеИменаГруппТипов);
		стПараметры.Свойство("ТекущиеТипы",ТекущиеТипы);
		стПараметры.Свойство("ПометкаТипов",ПометкаТипов);
		стПараметры.Свойство("ВыводитьПустыеГруппыТипов",ВыводитьПустыеГруппыТипов);
	КонецЕсли;
	
	// контроль допустимых значений параметров таблицы типов
	// установка значений параметров по умолчанию
	Если ТипЗнч(ЭтоДерево) <> Тип("Число") Тогда
		// по умолчанию - таблица в виде многоуровнего дерева
		ЭтоДерево = 1;
	Иначе
		ЭтоДерево = Цел(ЭтоДерево);
	КонецЕсли;
	Если ТипЗнч(ОтборТипов) <> Тип("ОписаниеТипов") Тогда
		// по умолчанию - отбора типов нет
		ОтборТипов = Неопределено;
	КонецЕсли;
	Если ТипЗнч(ТекущиеТипы) <> Тип("ОписаниеТипов") Тогда
		// по умолчанию - список текущих (отмеченных на момент открытия диалога) типов пуст
		ТекущиеТипы = Неопределено;
	КонецЕсли;
	Если ТипЗнч(ПометкаТипов) <> Тип("ОписаниеТипов") Тогда
		// не передано описание типов для восстановления текущей отметки строк в списке
		ПометкаТипов = Неопределено;
	КонецЕсли; 
	Если ТипЗнч(ВыводитьПустыеГруппыТипов) <> Тип("Булево") Тогда
		// по умолчанию - пустые группы типов не выводятся
		ВыводитьПустыеГруппыТипов = Ложь
	КонецЕсли;
	Если ВыводитьПустыеГруппыТипов = Истина И ЭтоДерево <> 1 Тогда
		// параметр действует только для многоуровнего дерева типов
		ВыводитьПустыеГруппыТипов = Ложь;
	КонецЕсли;
	
	// инициализация структуры таблицы типов
	Если ЭтоДерево < 1 Тогда
		// в обычной форме 		- вариант не реализован (из-за того, что не дает новых возможностей по сравнением с деревом значений)
		// в управляемой форме	- вариант реализован    (из-за дополнительых системных возможностей поиска в табличном поле формы)
		ТТ = Новый ТаблицаЗначений;
		ТТСтроки0 = ТТ;
	Иначе
		ТТ = Новый ДеревоЗначений;
		ТТСтроки0 = ТТ.Строки;
	КонецЕсли;
	
	ТТ.Колонки.Добавить("Метка",	 Новый ОписаниеТипов("Число",
									 Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ТТ.Колонки.Добавить("Картинка");
	ТТ.Колонки.Добавить("Имя",		 Новый ОписаниеТипов("Строка", ,
									 Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТТ.Колонки.Добавить("Синоним",	 Новый ОписаниеТипов("Строка", ,
									 Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТТ.Колонки.Добавить("Метка0",	 Новый ОписаниеТипов("Число",
									 Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ТТ.Колонки.Добавить("Тип");
	ТТ.Колонки.Добавить("МетаТип",	 Новый ОписаниеТипов("Строка", ,
									 Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТТ.Колонки.Добавить("ТипКод",	 Новый ОписаниеТипов("Число",
									 Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
	ТТ.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ТТ.Колонки.Добавить("НПП",		 Новый ОписаниеТипов("Число",
									 Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
										
	// исходящие параметры функции									
	НППМаксимальныйПометка = 0; // - максимальные номер по порядку среди отмеченных строк списка типов 
	мсВсеТипы = Новый Массив;   // - массив всех поддерживаемых типов 
	
	ТТСтроки0Пустые = Новый Массив;
	НПП = 0;
		
	// Заполнение таблицы типов: ССЫЛОЧНЫЕ ТИПЫ
	
	//101  СправочникСсылка
	МетаКолл = Метаданные.Справочники;
	ТипКод = 101;
	Если ЭтоДерево = 1 Тогда
		ЭтоГруппа = Истина;
		Картинка = КартинкаПоИмени("Справочник",""); //БиблиотекаКартинок.
		Тип = "Справочники.ТипВсеСсылки().Типы()";
		Если КраткиеИменаГруппТипов = Истина Тогда
			Имя = НСтр("ru = 'Справочники'; en = 'Catalogs'"); 
			Синоним = НСтр("ru = 'Справочники'; en = 'Catalogs'"); 
		Иначе
			Имя = НСтр("ru = 'СправочникСсылка'; en = 'CatalogRef'"); 
			Синоним = НСтр("ru = 'Справочник ссылка'; en = 'Catalog reference'"); 
		КонецЕсли; 
		СтрТГ = ТаблицаТиповДобавить(ТТСтроки0,ЭтоГруппа,ТипКод,Тип,"*",Картинка,Имя,Синоним,ОтборТипов,ТекущиеТипы,ПометкаТипов,НПП);
		ТТСтроки1 = СтрТГ.Строки;
	Иначе
		ТТСтроки1 = ТТСтроки0;
	КонецЕсли;
	ЭтоГруппа = Ложь;
	Картинка = КартинкаПоИмени("СправочникОбъект",""); //БиблиотекаКартинок.
	Для каждого МетаДата Из МетаКолл Цикл
		Тип = Тип("СправочникСсылка."+МетаДата.Имя);
		Имя = МетаДата.Имя; 
		Синоним = ?(ПустаяСтрока(МетаДата.Синоним),Имя,МетаДата.Синоним); 
		ТипМета = МетаДата.ПолноеИмя(); 
		СтрТТ = ТаблицаТиповДобавить(ТТСтроки1,ЭтоГруппа,ТипКод,Тип,ТипМета,Картинка,Имя,Синоним,ОтборТипов,ТекущиеТипы,ПометкаТипов,НПП);
		Если СтрТТ <> Неопределено И СтрТТ.Метка0 = 1 Тогда
			НППМаксимальныйПометка = НПП;
		КонецЕсли;
		мсВсеТипы.Добавить(Тип);
	КонецЦикла;
	Если ЭтоДерево = 1 Тогда
		Если МетаКолл.Количество()=0 ИЛИ ТТСтроки1.Количество()=0 Тогда
			ТТСтроки0Пустые.Добавить(СтрТГ);
		Иначе
			МеткаИ = СтрТГ.Строки.Итог("Метка",Ложь);
			СтрТГ.Метка = ?(МеткаИ=0,0,?(МеткаИ=СтрТГ.Строки.Количество(),1,2)); 
			СтрТГ.Метка0 = СтрТГ.Метка;
		КонецЕсли; 
	КонецЕсли; 
	
	//102  ДокументСсылка
	МетаКолл = Метаданные.Документы;
	ТипКод = 102;
	Если ЭтоДерево = 1 Тогда
		ЭтоГруппа = Истина;
		Картинка = КартинкаПоИмени("Документ",""); //БиблиотекаКартинок.
		Тип = "Документы.ТипВсеСсылки().Типы()";
		Если КраткиеИменаГруппТипов = Истина Тогда
			Имя = НСтр("ru = 'Документы'; en = 'Documents'"); 
			Синоним = НСтр("ru = 'Документы'; en = 'Documents'"); 
		Иначе
			Имя = НСтр("ru = 'ДокументСсылка'; en = 'DocumentRef'"); 
			Синоним = НСтр("ru = 'Документ ссылка'; en = 'Document reference'"); 
		КонецЕсли; 
		СтрТГ = ТаблицаТиповДобавить(ТТСтроки0,ЭтоГруппа,ТипКод,Тип,"*",Картинка,Имя,Синоним,ОтборТипов,ТекущиеТипы,ПометкаТипов,НПП);
		ТТСтроки1 = СтрТГ.Строки;
	Иначе
		ТТСтроки1 = ТТСтроки0;
	КонецЕсли;
	ЭтоГруппа = Ложь;
	Картинка = КартинкаПоИмени("ДокументОбъект",""); //БиблиотекаКартинок.
	Для каждого МетаДата Из МетаКолл Цикл
		Тип = Тип("ДокументСсылка."+МетаДата.Имя);
		Имя = МетаДата.Имя; 
		Синоним = ?(ПустаяСтрока(МетаДата.Синоним),Имя,МетаДата.Синоним); 
		ТипМета = МетаДата.ПолноеИмя(); 
		СтрТТ = ТаблицаТиповДобавить(ТТСтроки1,ЭтоГруппа,ТипКод,Тип,ТипМета,Картинка,Имя,Синоним,ОтборТипов,ТекущиеТипы,ПометкаТипов,НПП);
		Если СтрТТ <> Неопределено И СтрТТ.Метка0 = 1 Тогда
			НППМаксимальныйПометка = НПП;
		КонецЕсли;
		мсВсеТипы.Добавить(Тип);
	КонецЦикла;
	Если ЭтоДерево = 1 Тогда
		Если МетаКолл.Количество()=0 ИЛИ ТТСтроки1.Количество()=0 Тогда
			ТТСтроки0Пустые.Добавить(СтрТГ);
		Иначе
			МеткаИ = СтрТГ.Строки.Итог("Метка",Ложь);
			СтрТГ.Метка = ?(МеткаИ=0,0,?(МеткаИ=СтрТГ.Строки.Количество(),1,2)); 
			СтрТГ.Метка0 = СтрТГ.Метка;
		КонецЕсли; 
	КонецЕсли; 
		
	//112  БизнесПроцессСсылка
	МетаКолл = Метаданные.БизнесПроцессы;
	ТипКод = 112;
	Если ЭтоДерево = 1 Тогда
		ЭтоГруппа = Истина;
		Картинка = КартинкаПоИмени("БизнесПроцесс",""); //БиблиотекаКартинок.
		Тип = "БизнесПроцессы.ТипВсеСсылки().Типы()";
		Если КраткиеИменаГруппТипов = Истина Тогда
			Имя = НСтр("ru = 'БизнесПроцессы'; en = 'BusinessProcesses'"); 
			Синоним = НСтр("ru = 'Бизнес процессы'; en = 'Business processes'"); 
		Иначе
			Имя = НСтр("ru = 'БизнесПроцессСсылка'; en = 'BusinessProcessRef'"); 
			Синоним = НСтр("ru = 'Бизнес процесс ссылка'; en = 'Business process reference'"); 
		КонецЕсли; 
		СтрТГ = ТаблицаТиповДобавить(ТТСтроки0,ЭтоГруппа,ТипКод,Тип,"*",Картинка,Имя,Синоним,ОтборТипов,ТекущиеТипы,ПометкаТипов,НПП);
		ТТСтроки1 = СтрТГ.Строки;
	Иначе
		ТТСтроки1 = ТТСтроки0;
	КонецЕсли;
	ЭтоГруппа = Ложь;
	Картинка = КартинкаПоИмени("БизнесПроцессОбъект",""); //БиблиотекаКартинок.
	Для каждого МетаДата Из МетаКолл Цикл
		Тип = Тип("БизнесПроцессСсылка."+МетаДата.Имя);
		Имя = МетаДата.Имя; 
		Синоним = ?(ПустаяСтрока(МетаДата.Синоним),Имя,МетаДата.Синоним); 
		ТипМета = МетаДата.ПолноеИмя(); 
		СтрТТ = ТаблицаТиповДобавить(ТТСтроки1,ЭтоГруппа,ТипКод,Тип,ТипМета,Картинка,Имя,Синоним,ОтборТипов,ТекущиеТипы,ПометкаТипов,НПП);
		Если СтрТТ <> Неопределено И СтрТТ.Метка0 = 1 Тогда
			НППМаксимальныйПометка = НПП;
		КонецЕсли;
		мсВсеТипы.Добавить(Тип);
	КонецЦикла;
	Если ЭтоДерево = 1 Тогда
		Если МетаКолл.Количество()=0 ИЛИ ТТСтроки1.Количество()=0 Тогда
			ТТСтроки0Пустые.Добавить(СтрТГ);
		Иначе
			МеткаИ = СтрТГ.Строки.Итог("Метка",Ложь);
			СтрТГ.Метка = ?(МеткаИ=0,0,?(МеткаИ=СтрТГ.Строки.Количество(),1,2)); 
			СтрТГ.Метка0 = СтрТГ.Метка;
		КонецЕсли; 
	КонецЕсли; 
	
	//113 ТочкаМаршрутаБизнесПроцессаСсылка
	МетаКолл = Метаданные.БизнесПроцессы;
	ТипКод = 113;
	Если ЭтоДерево = 1 Тогда
		ЭтоГруппа = Истина;
		Картинка = КартинкаПоИмени("Ресурс","СохранитьЗначения"); //БиблиотекаКартинок.
		Тип = "БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы()";
		Если КраткиеИменаГруппТипов = Истина Тогда
			Имя = НСтр("ru = 'ТочкиМаршрутаБизнесПроцесса'; en = 'BusinessProcessRoutePoints'"); 
			Синоним = НСтр("ru = 'Точки маршрута бизнес процесса'; en = 'Business process route points'"); 
		Иначе
			Имя = НСтр("ru = 'ТочкаМаршрутаБизнесПроцессаСсылка'; en = 'BusinessProcessRoutePointRef'"); 
			Синоним = НСтр("ru = 'Точка маршрута бизнес процесса ссылка'; en = 'Business process route point reference'"); 
		КонецЕсли; 
		СтрТГ = ТаблицаТиповДобавить(ТТСтроки0,ЭтоГруппа,ТипКод,Тип,"*",Картинка,Имя,Синоним,ОтборТипов,ТекущиеТипы,ПометкаТипов,НПП);
		ТТСтроки1 = СтрТГ.Строки;
	Иначе
		ТТСтроки1 = ТТСтроки0;
	КонецЕсли;
	ЭтоГруппа = Ложь;
	Картинка = КартинкаПоИмени("Ресурс","СохранитьЗначения"); //БиблиотекаКартинок.
	Для каждого МетаДата Из МетаКолл Цикл
		Тип = Тип("ТочкаМаршрутаБизнесПроцессаСсылка."+МетаДата.Имя);
		Имя = МетаДата.Имя; 
		Синоним = ?(ПустаяСтрока(МетаДата.Синоним),Имя,МетаДата.Синоним); 
		ТипМета = МетаДата.ПолноеИмя(); 
		СтрТТ = ТаблицаТиповДобавить(ТТСтроки1,ЭтоГруппа,ТипКод,Тип,ТипМета,Картинка,Имя,Синоним,ОтборТипов,ТекущиеТипы,ПометкаТипов,НПП);
		Если СтрТТ <> Неопределено И СтрТТ.Метка0 = 1 Тогда
			НППМаксимальныйПометка = НПП;
		КонецЕсли;
		мсВсеТипы.Добавить(Тип);
	КонецЦикла;
	Если ЭтоДерево = 1 Тогда
		Если МетаКолл.Количество()=0 ИЛИ ТТСтроки1.Количество()=0 Тогда
			ТТСтроки0Пустые.Добавить(СтрТГ);
		Иначе
			МеткаИ = СтрТГ.Строки.Итог("Метка",Ложь);
			СтрТГ.Метка = ?(МеткаИ=0,0,?(МеткаИ=СтрТГ.Строки.Количество(),1,2)); 
			СтрТГ.Метка0 = СтрТГ.Метка;
		КонецЕсли; 
	КонецЕсли; 
	
	//114  ЗадачаСсылка
	МетаКолл = Метаданные.Задачи;
	ТипКод = 114;
	Если ЭтоДерево = 1 Тогда
		ЭтоГруппа = Истина;
		Картинка = КартинкаПоИмени("Задача",""); //БиблиотекаКартинок.
		Тип = "Задачи.ТипВсеСсылки().Типы()";
		Если КраткиеИменаГруппТипов = Истина Тогда
			Имя = НСтр("ru = 'Задачи'; en = 'Tasks'"); 
			Синоним = НСтр("ru = 'Задачи'; en = 'Tasks'"); 
		Иначе
			Имя = НСтр("ru = 'ЗадачаСсылка'; en = 'TaskRef'"); 
			Синоним = НСтр("ru = 'Задача ссылка'; en = 'Task reference'"); 
		КонецЕсли; 
		СтрТГ = ТаблицаТиповДобавить(ТТСтроки0,ЭтоГруппа,ТипКод,Тип,"*",Картинка,Имя,Синоним,ОтборТипов,ТекущиеТипы,ПометкаТипов,НПП);
		ТТСтроки1 = СтрТГ.Строки;
	Иначе
		ТТСтроки1 = ТТСтроки0;
	КонецЕсли;
	ЭтоГруппа = Ложь;
	Картинка = КартинкаПоИмени("ЗадачаОбъект",""); //БиблиотекаКартинок.
	Для каждого МетаДата Из МетаКолл Цикл
		Тип = Тип("ЗадачаСсылка."+МетаДата.Имя);
		Имя = МетаДата.Имя; 
		Синоним = ?(ПустаяСтрока(МетаДата.Синоним),Имя,МетаДата.Синоним); 
		ТипМета = МетаДата.ПолноеИмя(); 
		СтрТТ = ТаблицаТиповДобавить(ТТСтроки1,ЭтоГруппа,ТипКод,Тип,ТипМета,Картинка,Имя,Синоним,ОтборТипов,ТекущиеТипы,ПометкаТипов,НПП);
		Если СтрТТ <> Неопределено И СтрТТ.Метка0 = 1 Тогда
			НППМаксимальныйПометка = НПП;
		КонецЕсли;
		мсВсеТипы.Добавить(Тип);
	КонецЦикла;
	Если ЭтоДерево = 1 Тогда
		Если МетаКолл.Количество()=0 ИЛИ ТТСтроки1.Количество()=0 Тогда
			ТТСтроки0Пустые.Добавить(СтрТГ);
		Иначе
			МеткаИ = СтрТГ.Строки.Итог("Метка",Ложь);
			СтрТГ.Метка = ?(МеткаИ=0,0,?(МеткаИ=СтрТГ.Строки.Количество(),1,2)); 
			СтрТГ.Метка0 = СтрТГ.Метка;
		КонецЕсли; 
	КонецЕсли; 
		
	Возврат ТТ;
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеТиповПоискИнит(дзТипы,ФормаГУИД)
	тзПоиск = Новый ТаблицаЗначений;
	Для каждого Кол Из дзТипы.Колонки Цикл
		Если Найти("Метка0;Имя;Синоним;НПП;",Кол.Имя+";") > 0 Тогда
			тзПоиск.Колонки.Добавить(Кол.Имя,Кол.ТипЗначения,Кол.Заголовок,Кол.Ширина)
		КонецЕсли; 
	КонецЦикла;
	Кол = дзТипы.Колонки["НПП"];
	тзПоиск.Колонки.Добавить("РодительНПП",Кол.ТипЗначения,Кол.Заголовок,Кол.Ширина);
	Если ТипЗнч(дзТипы) = Тип("ДеревоЗначений") Тогда
		дзТипыСроки = дзТипы.Строки;
	Иначе
		дзТипыСроки = дзТипы;
	КонецЕсли; 
	Для каждого Стр0 Из дзТипыСроки Цикл
		Если Стр0.ЭтоГруппа = Истина Тогда
			Для каждого Стр1 Из Стр0.Строки Цикл
				СтрП = тзПоиск.Добавить();
				ЗаполнитьЗначенияСвойств(СтрП,Стр1);
				СтрП.РодительНПП = Стр0.НПП;
			КонецЦикла;
		Иначе
			СтрП = тзПоиск.Добавить();
			ЗаполнитьЗначенияСвойств(СтрП,Стр0);
			СтрП.РодительНПП = 0;
		КонецЕсли; 
	КонецЦикла;
	Возврат ПоместитьВоВременноеХранилище(тзПоиск,ФормаГУИД);
КонецФункции


&НаКлиенте
Функция ДеревоТиповНайтиПервуюОтмеченную(ДЗ,ТекДан)
	ТекДан = Неопределено;
	Если ТипЗнч(ДЗ) = Тип("ДанныеФормыКоллекция") ИЛИ ТипЗнч(ДЗ) = Тип("ДанныеФормыКоллекцияЭлементовДерева") Тогда
		ДЗСтроки = ДЗ;
	ИначеЕсли ТипЗнч(ДЗ) = Тип("ДанныеФормыДерево") Тогда
		ДЗСтроки = ДЗ.ПолучитьЭлементы();
	Иначе
		Возврат 0;
	КонецЕсли; 
	Для каждого СтрДан0 Из ДЗСтроки Цикл
		Если СтрДан0.Метка = 0 Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрДан0.ЭтоГруппа = Истина Тогда
			Для каждого СтрДан1 Из СтрДан0.ПолучитьЭлементы() Цикл
				Если СтрДан1.Метка = 1 Тогда
					ТекДан = СтрДан1;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			Если ТекДан <> Неопределено Тогда
				Прервать;
			КонецЕсли; 
		Иначе
			Если СтрДан0.Метка = 1 Тогда
				ТекДан = СтрДан0;
				Прервать;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Если ТекДан = Неопределено Тогда
		Возврат 0;
	Иначе
		Возврат ТекДан.НПП;
	КонецЕсли; 
КонецФункции

&НаКлиенте
Функция ДеревоТиповНайтиСтроку(ДЗ,ДЗИндекс,НПП,стПоиск=Неопределено)
	Если ТипЗнч(ДЗ) = Тип("ДанныеФормыКоллекция") Тогда
		ДЗСтроки = ДЗ;
	ИначеЕсли ТипЗнч(ДЗ) = Тип("ДанныеФормыДерево") Тогда
		ДЗСтроки = ДЗИндекс;
		ПоискПоИндексу = Истина;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	Если стПоиск = Неопределено Тогда
		стОтбор = Новый Структура("НПП",НПП);
	Иначе
		стОтбор = стПоиск;
	КонецЕсли; 
	СтрокиД = ДЗСтроки.НайтиСтроки(стОтбор);
	Если СтрокиД.Количество() > 0 Тогда
		Если ПоискПоИндексу = Истина Тогда
			Возврат ДЗ.НайтиПоИдентификатору(СтрокиД[0].Ид);
		Иначе
			Возврат СтрокиД[0];
		КонецЕсли; 
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеТиповНайтиПоСтрокеВИмени(ПодстрокиПоиска,Знач ШаблонПоиска,ПоискПоСинониму,ДанныеТиповПоискАдрес)
	
	ДанныеТиповПоиск = ПолучитьИзВременногоХранилища(ДанныеТиповПоискАдрес);
	Если ТипЗнч(ДанныеТиповПоиск) <> Тип("ТаблицаЗначений") Тогда
		ВызватьИсключение(НСтр("ru = 'Не найдены данные таблицы поиска для списка типов !!!'; en = 'Not found search table data for the data types list !!!'")); Возврат Null;
	КонецЕсли; 
	ШаблонПоиска = СокрЛП(ШаблонПоиска);
	
	ТолькоМетка0 = (Найти(ШаблонПоиска,"[]") > 0);
	Если ТолькоМетка0 = Истина Тогда
		ШаблонПоиска = СтрЗаменить(ШаблонПоиска,"[]","");
	КонецЕсли;
	
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска, " ","%"); // внутренние пробелы меняем на проценты
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска,"**","%"); // двойные звездочки  меняем на проценты
	
	Пока Истина Цикл // убираем кратные проценты
		ШаблонПоиска1 = СтрЗаменить(ШаблонПоиска,"%%","%");
		Если ШаблонПоиска1 = ШаблонПоиска Тогда
			Прервать;
		КонецЕсли;
		ШаблонПоиска = ШаблонПоиска1;
	КонецЦикла;
	
	ДополнитьЛ = Истина;
	ДополнитьП = Истина;
	Если Лев(ШаблонПоиска,2)="^%" Тогда
		ДополнитьЛ = Ложь;
		ШаблонПоиска = Сред(ШаблонПоиска,3);
	КонецЕсли; 
	Если Прав(ШаблонПоиска,2)="^%" Тогда
		ДополнитьП = Ложь;
		ШаблонПоиска = Лев(ШаблонПоиска,СтрДлина(ШаблонПоиска)-2);
	КонецЕсли;
	
	// на будущеее - список подстрок для выделения текста цветом в таблице результатов поиска
	ПодстрокиПоиска = СтрЗаменить(ШаблонПоиска,"%",Символы.ПС);
	
	Если ПустаяСтрока(ШаблонПоиска) Тогда
		Если ДополнитьЛ = Ложь И ДополнитьП = Ложь Тогда
			ШаблонПоиска = "";
		Иначе
			ШаблонПоиска = "%";
		КонецЕсли; 
	Иначе
		Если ДополнитьЛ = Истина И Лев(ШаблонПоиска,1) <> "%" Тогда
			ШаблонПоиска = "%"+ШаблонПоиска;
		КонецЕсли;
		Если ДополнитьП = Истина И Прав(ШаблонПоиска,1) <> "%" Тогда
			ШаблонПоиска = ШаблонПоиска+"%";
		КонецЕсли; 
	КонецЕсли; 
	
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	Т.Метка0 КАК Метка,
	|	Т.Имя КАК Имя,
	|	Т.Синоним КАК Синоним,
	|	Т.НПП КАК НПП,
	|	Т.РодительНПП КАК РодительНПП
	|ПОМЕСТИТЬ ДанныеПоиска
	|ИЗ
	|	&ДанныеТиповПоиск КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.РодительНПП КАК РодительНПП,
	|	Т.НПП КАК НПП
	|ИЗ
	|	ДанныеПоиска КАК Т
	|ГДЕ
	|	&Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	НПП";
	СтрУсловия = "";
	Если ТолькоМетка0 = Истина Тогда
		СтрУсловия = СтрУсловия +?(ПустаяСтрока(СтрУсловия),""," И ") + "Т.Метка = 1";
	КонецЕсли; 
	Если ПоискПоСинониму = Истина Тогда
		СтрУсловия = СтрУсловия +?(ПустаяСтрока(СтрУсловия),""," И ") + "Т.Синоним ПОДОБНО &ШаблонПоиска";
	Иначе
		СтрУсловия = СтрУсловия +?(ПустаяСтрока(СтрУсловия),""," И ") + "Т.Имя ПОДОБНО &ШаблонПоиска";
	КонецЕсли;
	ЗапросТекст = СтрЗаменить(ЗапросТекст,"&Условие",СтрУсловия);
	Запрос = Новый Запрос(ЗапросТекст);
	Запрос.УстановитьПараметр("ДанныеТиповПоиск",ДанныеТиповПоиск);
	Запрос.УстановитьПараметр("ШаблонПоиска",ШаблонПоиска);
	
	мсРезультат = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		мсРезультат.Добавить(Новый Структура("РодительНПП,НПП",Выборка.РодительНПП,Выборка.НПП));
	КонецЦикла;
	
	Возврат мсРезультат;
КонецФункции

&НаКлиенте
Процедура ДеревоТиповОбновитьПоиск_Режим0()
	ДеревоТиповПоиск.ПолучитьЭлементы().Очистить();
	ДеревоТиповПоискИндекс.Очистить();
	Если РежимВыбораТипаДанных = Истина Тогда
		Элементы.СтрокаПоиска2.КнопкаВыбора = Ложь;
	Иначе
		Элементы.СтрокаПоиска1.КнопкаВыбора = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповОбновитьПоиск_Режим1(ШаблонПоиска,ШаблонПоиска0)
	Перем ПодстрокиПоиска;
	Перем ЭлементТФС,ЭлементТФП,РеквизитТФ,ТекДанС;
	ШаблонПоиска0 = ШаблонПоиска;
	СписокТиповЭлементРеквизитОпределить(ЭлементТФС,ЭлементТФП,РеквизитТФ,);
	ТекСтрС = ЭлементТФС.ТекущаяСтрока;
	Если ТекСтрС <> Неопределено Тогда
		ТекДанС = РеквизитТФ.НайтиПоИдентификатору(ТекСтрС);
	КонецЕсли; 
	СтрокиП0 = ДеревоТиповПоиск.ПолучитьЭлементы();
	СтрокиП0.Очистить(); 
	соРодители = Новый Соответствие;
	стПоиск = Новый Структура("НПП");
	мсРезультат1 = ДанныеТиповНайтиПоСтрокеВИмени(ПодстрокиПоиска,ШаблонПоиска,ПоказыватьИменаОбъектов<>Истина,ДанныеТиповПоискАдрес);
	мсРезультат2 = Новый Массив;
	// первая итерация - добавление найденных строк первого уровня и родительских строк второго уровня
	Для каждого Выборка Из мсРезультат1 Цикл 
		Если Выборка.РодительНПП = 0 Тогда
			// у найденной строки нет родительской - 
			// - добавляем в потоке саму найденную строку
			стПоиск.НПП = Выборка.НПП;
			СтрС = ДеревоТиповНайтиСтроку(РеквизитТФ,ДеревоТиповИндекс,,стПоиск);
			Если СтрС <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокиП0.Добавить(),СтрС);
			КонецЕсли; 
		Иначе
			// у найденной строки есть родительская - 
			// - в потоке добавляем родительскую строку (если ее еще нет в таблице поиска)
			// - сами найденные строки добавим во второй итерации обработки результата поиска
			Если соРодители[Выборка.РодительНПП] = Неопределено Тогда
				стПоиск.НПП = Выборка.РодительНПП;
				СтрС = ДеревоТиповНайтиСтроку(РеквизитТФ,ДеревоТиповИндекс,,стПоиск);
				Если СтрС <> Неопределено Тогда
					Стр0 = СтрокиП0.Добавить();
					ЗаполнитьЗначенияСвойств(Стр0,СтрС);
					соРодители[Выборка.РодительНПП] = Стр0.ПолучитьЭлементы();
				КонецЕсли; 
			КонецЕсли; 
			Если соРодители[Выборка.РодительНПП] = Неопределено Тогда
				// дурацкий крайний случай (так не дожно быть!): не удалось найти по НПП исходную родительскую строку - 
				// - добавляем в потоке саму найденную строку 
				стПоиск.НПП = Выборка.НПП;
				СтрС = ДеревоТиповНайтиСтроку(РеквизитТФ,ДеревоТиповИндекс,,стПоиск);
				Если СтрС <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокиП0.Добавить(),СтрС);
				КонецЕсли;
			Иначе
				мсРезультат2.Добавить(Выборка);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	// вторая итерация - добавление найденных строк второго уровня 
	Для каждого Выборка Из мсРезультат2 Цикл
		Строки0 = соРодители[Выборка.РодительНПП];
		Если Строки0 <> Неопределено Тогда
			стПоиск.НПП = Выборка.НПП;
			СтрС = ДеревоТиповНайтиСтроку(РеквизитТФ,ДеревоТиповИндекс,,стПоиск);
			Если СтрС <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Строки0.Добавить(),СтрС);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	ДеревоТиповОбновитьПоиск_ПослеЗаполнения(ЭлементТФП,ТекДанС);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповОбновитьПоиск_Режим2()
	Перем ЭлементТФС,ЭлементТФП,РеквизитТФ,СтрокиТФ,ТекДанС;
	СписокТиповЭлементРеквизитОпределить(ЭлементТФС,ЭлементТФП,РеквизитТФ,СтрокиТФ);
	ТекСтрС = ЭлементТФС.ТекущаяСтрока;
	Если ТекСтрС <> Неопределено Тогда
		ТекДанС = РеквизитТФ.НайтиПоИдентификатору(ТекСтрС);
	КонецЕсли; 
	СтрокиП0 = ДеревоТиповПоиск.ПолучитьЭлементы();
	СтрокиП0.Очистить(); 
	Для каждого Стр0 Из СтрокиТФ Цикл
		Если Стр0.Метка = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрП0 = СтрокиП0.Добавить();
		ЗаполнитьЗначенияСвойств(СтрП0,Стр0);
		Если Стр0.ЭтоГруппа = Истина Тогда
			СтрокиП1 = СтрП0.ПолучитьЭлементы();
			Для каждого Стр1 Из Стр0.ПолучитьЭлементы() Цикл
				Если Стр1.Метка = 1 Тогда
					ЗаполнитьЗначенияСвойств(СтрокиП1.Добавить(),Стр1);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	ДеревоТиповОбновитьПоиск_ПослеЗаполнения(ЭлементТФП,ТекДанС)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповОбновитьПоиск_ПослеЗаполнения(Элемент,ТекДанС)
	// индексируем дерово значений с результатами поиска
	ПоляИндекса = "Имя,Синоним,Тип,ТипКод,ЭтоГруппа,НПП,Метка0";
	ДеревоТиповПоискИндекс.Очистить();
	Для каждого Стр0 Из ДеревоТиповПоиск.ПолучитьЭлементы() Цикл
		СтрИ = ДеревоТиповПоискИндекс.Добавить();
		ЗаполнитьЗначенияСвойств(СтрИ,Стр0,ПоляИндекса);
		СтрИ.Ид = Стр0.ПолучитьИдентификатор();
		Для каждого Стр1 Из Стр0.ПолучитьЭлементы() Цикл
			СтрИ = ДеревоТиповПоискИндекс.Добавить();
			ЗаполнитьЗначенияСвойств(СтрИ,Стр1,ПоляИндекса);
			СтрИ.Ид = Стр1.ПолучитьИдентификатор();
		КонецЦикла;  
	КонецЦикла;
	// разворачиваем узлы дерева с результатами поиска
	ДеревоТиповРазвернутьСвернуть(Элемент,ДеревоТиповПоиск.ПолучитьЭлементы(),Истина);
	Если ТекДанС <> Неопределено Тогда
		ТекДанП = ДеревоТиповНайтиСтроку(ДеревоТиповПоиск,ДеревоТиповПоискИндекс,ТекДанС.НПП);
		Если ТекДанП <> Неопределено Тогда
			Элемент.ТекущаяСтрока = ТекДанП.ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли;
	// сбрасываем идентификатор отмеченной строки, если его нет в результатах поиска
	Если НППОтмеченный > 0 И ДеревоТиповНайтиСтроку(ДеревоТиповПоиск,ДеревоТиповПоискИндекс,НППОтмеченный) = Неопределено Тогда
		НППОтмеченный = 0;
	КонецЕсли;
	// скрываем кнопку выбора у поля ввода со строкой поиска
	// используется для обновления результатов поиска: 
	// - при пометке в списке 
	// - при изменении представления отобоажения типа (Имя/Синоним)
	Если РежимВыбораТипаДанных = Истина Тогда
		Элементы.СтрокаПоиска2.КнопкаВыбора = Ложь;
	Иначе
		Элементы.СтрокаПоиска1.КнопкаВыбора = Ложь;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповПоискСогласоватьПометку()
	Если ИспользоватьТаблицуТипов = Истина Тогда
		РеквизитТФ = ТаблицаТипов;
	Иначе
		РеквизитТФ = ДеревоТипов;
	КонецЕсли;
	стПоиск = Новый Структура("НПП");
	Для каждого Стр0 Из ДеревоТиповПоиск.ПолучитьЭлементы() Цикл
		стПоиск.НПП = Стр0.НПП;
		СтрС = ДеревоТиповНайтиСтроку(РеквизитТФ,ДеревоТиповИндекс,,стПоиск);
		Если СтрС <> Неопределено Тогда
			Стр0.Метка = СтрС.Метка;
		КонецЕсли; 
		Если Стр0.ЭтоГруппа = Истина Тогда
			Для каждого Стр1 Из Стр0.ПолучитьЭлементы() Цикл
				стПоиск.НПП = Стр1.НПП;
				СтрС = ДеревоТиповНайтиСтроку(РеквизитТФ,ДеревоТиповИндекс,,стПоиск);
				Если СтрС <> Неопределено Тогда
					Стр1.Метка = СтрС.Метка;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры


&НаСервере
Процедура ПолеФормыУстановитьВыборИзСписка(Поле,Редактирование=Ложь)
	Попытка
		Поле.КнопкаСпискаВыбора = Истина;
	Исключение
		Еррор1 = Истина;
	КонецПопытки;
	Попытка
		Поле.КнопкаВыпадающегоСписка = Истина;
	Исключение
		Еррор2 = Истина;
	КонецПопытки;
	Если Еррор1 <> Истина И Еррор2 <> Истина Тогда
		//Поле.КнопкаСпискаВыбора = Ложь; // ???
		//Поле.КнопкаВыпадающегоСписка = Ложь;
	КонецЕсли; 
	Поле.РежимВыбораИзСписка = Истина;
	Поле.КнопкаВыбора = Ложь;
	Поле.РедактированиеТекста = (Редактирование=Истина);
КонецПроцедуры

&НаСервере
Процедура ЭтаФормаИнтерфейсИнит(ВсеПоддерживаемыеТипы)
	
	Если ТипЗнч(ВсеПоддерживаемыеТипы) <> Тип("Массив") Тогда
		ВсеПоддерживаемыеТипы = Новый Массив;
	КонецЕсли;
	
	// локализация заголовока диалога формы
	Если ЭтаФорма.РежимВыбораТипаДанных Тогда
		ЭтаФормаЗаголовок = НСтр("ru = 'Выбор типа данных'; en = 'Select data type'");
		ТекущаяСтраница0 = Элементы.ДиалогВыбораТипа;
	Иначе
		ЭтаФормаЗаголовок = НСтр("ru = 'Редактирование типа данных'; en = 'Edit data type'"); 
		ТекущаяСтраница0 = Элементы.ДиалогРедактированияТипа;
	КонецЕсли;
	Если ПустаяСтрока(ЗаголовокДиалога) Тогда
		ЭтаФорма.Заголовок = ЭтаФормаЗаголовок;
	Иначе
		ЭтаФорма.Заголовок = ЗаголовокДиалога;
	КонецЕсли; 
	
	// установка свойств панелей формы
	Панель = Элементы.ГруппаПанельФормы;
	Панель.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Панель.ТекущаяСтраница = ТекущаяСтраница0;
	ПанельС = Элементы.СтраницыДеревоТиповВыбор;
	ПанельС.ОтображениеСтраниц = Панель.ОтображениеСтраниц;
	ПанельС = Элементы.СтраницыДеревоТиповРедактирование;
	ПанельС.ОтображениеСтраниц = Панель.ОтображениеСтраниц;
	
	// локализация заголовока и надписи признака составного типа
	Поле = Элементы.СоставнойТипДанных;
	Поле.Заголовок = НСтр("ru = 'Составной тип данных'; en = 'Composit data type'"); 
	Поле.Подсказка = НСтр("ru = 'Особые варианты выбора - через контекстное меню'; en = 'Special selection options - via context menu'"); 
	Надпись = Элементы.НадписьСоставнойТипДанных;
	Надпись.Заголовок = Поле.Заголовок;
	Надпись.Подсказка = Поле.Подсказка;
	
	// локализация поля ввода строки поиска и связанных элементов формы
	Поле1 = Элементы.СтрокаПоиска1;
	Поле2 = Элементы.СтрокаПоиска2;
	Поле1.Подсказка = НСтр("ru = 'Строка поиска в имени или в синониме строки типа данных'; en = 'Search string in name or synonym of the data type''s row'");
	Поле1.Подсказка = Поле.Подсказка + Символы.ПС + НСтр("ru = 'Активизировать: '; en = 'Activate: '") + "(Ctrl + Alt + M)";
	Поле1.КнопкаВыбора = Ложь;
	Поле1.КартинкаКнопкиВыбора = БиблиотекаКартинок.Перечитать;
	Поле1.КнопкаОчистки = Истина;
	Поле1.ТолькоПросмотр = Ложь;
	ЗаполнитьЗначенияСвойств(Поле2,Поле1,"Подсказка,КнопкаВыбора,КартинкаКнопкиВыбора,КнопкаОчистки,ТолькоПросмотр");
	
	// заморочки с шириной/высотой элементов под 8.3.7
	стСвойства = Новый Структура;
	стСвойства.Вставить("АвтоМаксимальнаяШирина",Ложь);
	стСвойства.Вставить("МаксимальнаяШирина",0);
	
	ПиктоСП1 = Элементы.СтрокаПоискаПикто1;
	ПиктоСП2 = Элементы.СтрокаПоискаПикто2;
	
	Таблица1 = Элементы.ДеревоТиповРедактирование;
	Таблица2 = Элементы.ДеревоТиповВыбор;
	Таблица3 = Элементы.ДеревоТиповРедактированиеПоиск;
	Таблица4 = Элементы.ДеревоТиповВыборПоиск;
	Таблица5 = Элементы.ТаблицаТиповРедактирование;
	Таблица6 = Элементы.ТаблицаТиповВыбор;
	
	Таблица5.ПоискПриВводе = ПоискВТаблицеПриВводе.Использовать;
	Таблица6.ПоискПриВводе = ПоискВТаблицеПриВводе.Использовать;
	
	Попытка
		ЗаполнитьЗначенияСвойств(Надпись,стСвойства);
		ЗаполнитьЗначенияСвойств(Поле1,стСвойства);
		ЗаполнитьЗначенияСвойств(Поле2,стСвойства);
	Исключение
	КонецПопытки;
	
	стСвойства.Вставить("АвтоМаксимальнаяВысота",Ложь);
	стСвойства.Вставить("МаксимальнаяВысота",0);
	Попытка
		ЗаполнитьЗначенияСвойств(ПиктоСП1,стСвойства);
		ЗаполнитьЗначенияСвойств(ПиктоСП2,стСвойства);
		ЗаполнитьЗначенияСвойств(Таблица1,стСвойства);
		ЗаполнитьЗначенияСвойств(Таблица2,стСвойства);
		ЗаполнитьЗначенияСвойств(Таблица3,стСвойства);
		ЗаполнитьЗначенияСвойств(Таблица4,стСвойства);
		ЗаполнитьЗначенияСвойств(Таблица5,стСвойства);
		ЗаполнитьЗначенияСвойств(Таблица6,стСвойства);
	Исключение
	КонецПопытки;
	
	// це тут ниже - еще одно великое шаманство против еще одного великого хамства!!!
	Попытка
		//ЭтаФорма.ВертикальнаяПрокрутка = Вычислить("ВертикальнаяПрокруткаФормы.ИспользоватьБезРастягивания ");
		ЭтаФорма.ВертикальнаяПрокрутка = Вычислить("ВертикальнаяПрокруткаФормы.ИспользоватьПриНеобходимости");
	Исключение
	КонецПопытки;
	Попытка
		Поле1.ОбновлениеТекстаРедактирования = Вычислить("ОбновлениеТекстаРедактирования.НеИспользовать");
		Поле2.ОбновлениеТекстаРедактирования = Поле1.ОбновлениеТекстаРедактирования;
	Исключение
	КонецПопытки;
	
	// картинка с гиперссылкой для включения/выключения показа только отмеченных строк
	Поле = ПиктоСП1;
	Поле.Подсказка = НСтр("ru = 'Включить/выключить показ только отмеченных строк в списке типов'; en = 'Enable/disable display only marked rows in the data type''s list'"); 
	Поле.Гиперссылка = Истина;
	Поле.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная,1);
	Поле.ТекстНевыбраннойКартинки = "<>";
	ЗаполнитьЗначенияСвойств(ПиктоСП2,ПиктоСП1,"Подсказка,Гиперссылка,Рамка,ТекстНевыбраннойКартинки");
	// команда для активизации строки поиска по горячей клавише (Ctrl + Alt + M)
	Команда = Команды.ПоискАктивизировать;
	Команда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.M,Истина,Истина,Ложь);
	Команда.Заголовок = НСтр("ru = 'Активизировать поиск'; en = ''");
	Команда.Подсказка = НСтр("ru = 'Активизировать строку поиска'; en = 'Activate the search string'");
	Команда.Картинка = БиблиотекаКартинок.НайтиВДереве;
	// команда для переключения показа только отмеченных строк по горячей клавише (Ctrl + Shift + 1)
	Команда = Команды.ПоискТолькоОтмеченные;
	Команда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша._1,Ложь,Истина,Истина);
	Команда.Заголовок = НСтр("ru = 'Только отмеченные типы'; en = 'Only marked data types'");
	Команда.Подсказка = НСтр("ru = 'Включить/выключить показ только отмеченных строк'; en = 'Enable/disable display only marked rows in the data type''s list'");
	Команда.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	// команда для сброса результатов поиска по горячей клавише (Ctrl + Shift + 2)
	Команда = Команды.ПоискСбросить;
	Команда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша._2,Ложь,Истина,Истина);
	Команда.Заголовок = НСтр("ru = 'Сбросить поиск'; en = 'Reset search'");
	Команда.Подсказка = НСтр("ru = 'Сбросить результаты поиска'; en = 'Reset the search results'");
	Команда.Картинка = БиблиотекаКартинок.Очистить;
	
	
	// локализация контекстного меню признака составного типа
	Команда = Команды.ДеревоТиповУстановитьВсеТипы;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Команда.Заголовок = НСтр("ru = 'Установить все типы'; en = 'Select all data types'");
	Команда.Подсказка = НСтр("ru = 'Установить все типы в списке'; en = 'Select all data types in the list'");
	
	Команда = Команды.ДеревоТиповСброситьВсеТипы;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка = БиблиотекаКартинок.СнятьФлажки;
	Команда.Заголовок = НСтр("ru = 'Сбросить все типы'; en = 'Unselect all data types'");
	Команда.Подсказка = НСтр("ru = 'Сбросить все типы в списке'; en = 'Unselect all data types in the list'");
		
	Команда = Команды.ВосстановитьЗначениеТипаДанных;
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка = БиблиотекаКартинок.Перечитать;
	Команда.Заголовок = НСтр("ru = 'Восстановить значение типа данных'; en = 'Restore the value of the data type'");
	Команда.Подсказка = НСтр("ru = 'Восстановить исходное значение типа данных'; en = 'Restore the initial value of the data type'");
	
	// локализация и заполнение подменю выбора "предопределенных" типов данных
	ТипКФ = Тип("КнопкаФормы");
	
	Подменю1 = Элементы.МенюУстановитьТипП1;
	Подменю1.Заголовок = НСтр("ru = 'Выбрать ""предопределенный"" тип'; en = 'Select ""predefined"" data type'"); 
	Подменю1.Подсказка = НСтр("ru = 'Установить в списке один из ""предопределенных"" типов данных'; en = 'Select in the list one of the ""predefined"" data types'"); 
	Подменю2 = Элементы.МенюУстановитьТипП2;
	Подменю2.Заголовок = Подменю1.Заголовок;
	Подменю2.Подсказка = Подменю1.Подсказка;
	
	Команда0 = Команды.ДеревоТиповУстановитьТипВсеСсылки;
	Команда0.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Команда0.Картинка = БиблиотекаКартинок.Дендрограмма;
	Команда0.Заголовок = НСтр("ru = 'Тип ""ЛюбаяСсылка""'; en = 'Type ""AnyReference""'");
	Команда0.Подсказка = НСтр("ru = 'Установить в списке тип ""ЛюбаяСсылка""'; en = 'Select in the list data type ""AnyReference""'");
	
	//101  СправочникСсылка
	Команда1 = Команды.Добавить(Команда0.Имя + "101");
	Команда1.Действие = Команда0.Действие;
	Команда1.Отображение = Команда0.Отображение;
	Команда1.Картинка = БиблиотекаКартинок.Справочник;
	Команда1.Заголовок = НСтр("ru = 'Тип ""СправочникСсылка""'; en = 'Type ""CatalogRef""'");
	Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""СправочникСсылка""'; en = 'Select in the list data type ""CatalogRef""'");
	Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.Справочники.Количество()>0);
	Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.Справочники.Количество()>0);
	
	//102  ДокументСсылка
	Команда1 = Команды.Добавить(Команда0.Имя + "102");
	Команда1.Действие = Команда0.Действие;
	Команда1.Отображение = Команда0.Отображение;
	Команда1.Картинка = БиблиотекаКартинок.Документ;
	Команда1.Заголовок = НСтр("ru = 'Тип ""ДокументСсылка""'; en = 'Type ""DocumentRef""'");
	Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""ДокументСсылка""'; en = 'Select in the list data type ""DocumentRef""'");
	Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.Документы.Количество()>0);
	Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.Документы.Количество()>0);
	
	//103  ПеречислениеСсылка
	Команда1 = Команды.Добавить(Команда0.Имя + "103");
	Команда1.Действие = Команда0.Действие;
	Команда1.Отображение = Команда0.Отображение;
	Команда1.Картинка = БиблиотекаКартинок.Перечисление;
	Команда1.Заголовок = НСтр("ru = 'Тип ""ПеречислениеСсылка""'; en = 'Type ""EnumRef""'");
	Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""ПеречислениеСсылка""'; en = 'Select in the list data type ""EnumRef""'");
	Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.Перечисления.Количество()>0);
	Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.Перечисления.Количество()>0);
	
	//104  ПланВидовХарактеристикСсылка
	Команда1 = Команды.Добавить(Команда0.Имя + "104");
	Команда1.Действие = Команда0.Действие;
	Команда1.Отображение = Команда0.Отображение;
	Команда1.Картинка = БиблиотекаКартинок.ПланВидовХарактеристик;
	Команда1.Заголовок = НСтр("ru = 'Тип ""ПланВидовХарактеристикСсылка""'; en = 'Type ""ChartOfCharacteristicTypesRef""'");
	Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""ПланВидовХарактеристикСсылка""'; en = 'Select in the list data type ""ChartOfCharacteristicTypesRef""'");
	Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.ПланыВидовХарактеристик.Количество()>0);
	Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.ПланыВидовХарактеристик.Количество()>0);
	
	//105  ПланСчетовСсылка
	Команда1 = Команды.Добавить(Команда0.Имя + "105");
	Команда1.Действие = Команда0.Действие;
	Команда1.Отображение = Команда0.Отображение;
	Команда1.Картинка = БиблиотекаКартинок.ПланСчетов;
	Команда1.Заголовок = НСтр("ru = 'Тип ""ПланСчетовСсылка""'; en = 'Type ""ChartOfAccountsRef""'");
	Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""ПланСчетовСсылка""'; en = 'Select in the list data type ""ChartOfAccountsRef""'");
	Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.ПланыСчетов.Количество()>0);
	Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.ПланыСчетов.Количество()>0);
	
	//106  ПланВидовРасчетаСсылка
	Команда1 = Команды.Добавить(Команда0.Имя + "106");
	Команда1.Действие = Команда0.Действие;
	Команда1.Отображение = Команда0.Отображение;
	Команда1.Картинка = БиблиотекаКартинок.ПланВидовРасчета;
	Команда1.Заголовок = НСтр("ru = 'Тип ""ПланВидовРасчетаСсылка""'; en = 'Type ""ChartOfCalculationTypesRef""'");
	Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""ПланВидовРасчетаСсылка""'; en = 'Select in the list data type ""ChartOfCalculationTypesRef""'");
	Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.ПланыВидовРасчета.Количество()>0);
	Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.ПланыВидовРасчета.Количество()>0);
	
	//107  БизнесПроцессСсылка
	Команда1 = Команды.Добавить(Команда0.Имя + "107");
	Команда1.Действие = Команда0.Действие;
	Команда1.Отображение = Команда0.Отображение;
	Команда1.Картинка = БиблиотекаКартинок.БизнесПроцесс;
	Команда1.Заголовок = НСтр("ru = 'Тип ""БизнесПроцессСсылка""'; en = 'Type ""BusinessProcessRef""'");
	Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""БизнесПроцессСсылка""'; en = 'Select in the list data type ""BusinessProcessRef""'");
	Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.БизнесПроцессы.Количество()>0);
	Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.БизнесПроцессы.Количество()>0);
	
	//108  ТочкаМаршрутаБизнесПроцессаСсылка
	Команда1 = Команды.Добавить(Команда0.Имя + "108");
	Команда1.Действие = Команда0.Действие;
	Команда1.Отображение = Команда0.Отображение;
	Команда1.Картинка = БиблиотекаКартинок.СохранитьЗначения;
	Команда1.Заголовок = НСтр("ru = 'Тип ""ТочкаМаршрутаБизнесПроцессаСсылка""'; en = 'Type ""BusinessProcessRoutePointRef""'");
	Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""ТочкаМаршрутаБизнесПроцессаСсылка""'; en = 'Select in the list data type ""BusinessProcessRoutePointRef""'");
	Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.БизнесПроцессы.Количество()>0);
	Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.БизнесПроцессы.Количество()>0);
	
	//109  ЗадачаСсылка
	Команда1 = Команды.Добавить(Команда0.Имя + "109");
	Команда1.Действие = Команда0.Действие;
	Команда1.Отображение = Команда0.Отображение;
	Команда1.Картинка = БиблиотекаКартинок.Задача;
	Команда1.Заголовок = НСтр("ru = 'Тип ""ЗадачаСсылка""'; en = 'Type ""TaskRef""'");
	Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""ЗадачаСсылка""'; en = 'Select in the list data type ""TaskRef""'");
	Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.Задачи.Количество()>0);
	Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.Задачи.Количество()>0);
	
	//110  ПланОбменаСсылка	
	Команда1 = Команды.Добавить(Команда0.Имя + "110");
	Команда1.Действие = Команда0.Действие;
	Команда1.Отображение = Команда0.Отображение;
	Команда1.Картинка = БиблиотекаКартинок.ПланОбмена;
	Команда1.Заголовок = НСтр("ru = 'Тип ""ПланОбменаСсылка""'; en = 'Type ""ExchangePlanRef""'");
	Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""ПланОбменаСсылка""'; en = 'Select in the list data type ""ExchangePlanRef""'");
	Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.ПланыОбмена.Количество()>0);
	Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
	Кнопка.ИмяКоманды = Команда1.Имя;
	Кнопка.Доступность = (Метаданные.ПланыОбмена.Количество()>0);
	
	// локализация и заполнение подменю выбора типов "характеристик" конфигурации
	Подменю1 = Элементы.МенюУстановитьТипХ1;
	Подменю1.Заголовок = НСтр("ru = 'Выбрать тип характеристик'; en = 'Select characteristic''s data type'");
	Подменю1.Подсказка = НСтр("ru = 'Установить в списке один из составных типов характеристик конфигурации'; en = 'Select in the list one of the characteristic''s composite data types in configuration'"); 
	Подменю2 = Элементы.МенюУстановитьТипХ2;
	Подменю2.Заголовок = Подменю1.Заголовок;
	Подменю2.Подсказка = Подменю1.Подсказка;
	Попытка
		ВсеМетаПВХ = Вычислить("Метаданные.ПланыВидовХарактеристик");
	Исключение
		ВсеМетаПВХ = Неопределено;
	КонецПопытки;
	Если ВсеМетаПВХ <> Неопределено Тогда
		Команда0 = Команды.ДеревоТиповУстановитьТипПВХ_;
		Для каждого МетаОбъ Из ВсеМетаПВХ Цикл
			Пропустить = Ложь;
			Для каждого Типп Из МетаОбъ.Тип.Типы() Цикл
				Если ВсеПоддерживаемыеТипы.Найти(Типп) = Неопределено Тогда
					Пропустить = Истина;
					Прервать; // обнаружен не поддерживаемый (возможно недопустимый на клиенте) тип
				КонецЕсли; 
			КонецЦикла;
			Если Пропустить = Истина Тогда
				Продолжить;
			КонецЕсли;
			Команда1 = Команды.Добавить(Команда0.Имя + МетаОбъ.Имя);
			Команда1.Действие = Команда0.Действие;
			Команда1.Отображение = Команда0.Отображение;
			Команда1.Картинка = Команда0.Картинка;
			Команда1.Заголовок = НСтр("ru = 'Тип ""Характеристика.'; en = 'Type ""Сharacteristic.'") + МетаОбъ.Имя + """";
			Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""Характеристика.'; en = 'Select in the list data type ""Сharacteristic.'") + МетаОбъ.Имя + """";
			Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
			Кнопка.ИмяКоманды = Команда1.Имя;
			Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
			Кнопка.ИмяКоманды = Команда1.Имя;
		КонецЦикла; 
	КонецЕсли; 
	
	// локализация и заполнение подменю выбора "определенных" типов конфигурации
	Подменю1 = Элементы.МенюУстановитьТипО1;
	Подменю1.Заголовок = НСтр("ru = 'Выбрать определяемый тип'; en = 'Select defined data type'");
	Подменю1.Подсказка = НСтр("ru = 'Установить в списке один из определяемых составных типов конфигурации'; en = 'Select in the list one of the defined data types in configuration'"); 
	Подменю2 = Элементы.МенюУстановитьТипО2;
	Подменю2.Заголовок = Подменю1.Заголовок;
	Подменю2.Подсказка = Подменю1.Подсказка;
	Попытка
		ВсеМетаОПТ = Вычислить("Метаданные.ОпределяемыеТипы");
	Исключение
		ВсеМетаОПТ = Неопределено;
	КонецПопытки;
	Если ВсеМетаОПТ <> Неопределено Тогда
		Команда0 = Команды.ДеревоТиповУстановитьТипОПТ_;
		Для каждого МетаОбъ Из ВсеМетаОПТ Цикл
			Пропустить = Ложь;
			Для каждого Типп Из МетаОбъ.Тип.Типы() Цикл
				Если ВсеПоддерживаемыеТипы.Найти(Типп) = Неопределено Тогда
					Пропустить = Истина;
					Прервать; // обнаружен не поддерживаемый (возможно недопустимый на клиенте тип)
				КонецЕсли; 
			КонецЦикла;
			Если Пропустить = Истина Тогда
				Продолжить;
			КонецЕсли;
			Команда1 = Команды.Добавить(Команда0.Имя + МетаОбъ.Имя);
			Команда1.Действие = Команда0.Действие;
			Команда1.Отображение = Команда0.Отображение;
			Команда1.Картинка = Команда0.Картинка;
			Команда1.Заголовок = НСтр("ru = 'Тип ""ОпределяемыйТип.'; en = 'Type ""DefinedType.'") + МетаОбъ.Имя + """";
			Команда1.Подсказка = НСтр("ru = 'Установить в списке тип ""ОпределяемыйТип.'; en = 'Select in the list data type ""DefinedType.'") + МетаОбъ.Имя + """";
			Кнопка = Элементы.Добавить(Команда1.Имя+"_1",ТипКФ,Подменю1);
			Кнопка.ИмяКоманды = Команда1.Имя;
			Кнопка = Элементы.Добавить(Команда1.Имя+"_2",ТипКФ,Подменю2);
			Кнопка.ИмяКоманды = Команда1.Имя;
		КонецЦикла; 
	КонецЕсли; 
	
	// локализация элементов формы, связанных с квалификаторами чисел
	Надпись1 = Элементы.НадписьЧислоДлина1;
	Надпись1.Заголовок = НСтр("ru = 'Длина'; en = 'Lencth'");
	Надпись1.Подсказка = НСтр("ru = 'Длина числа'; en = 'Number lencth'");
	Поле1 = Элементы.ЧислоДлина1;
	Поле1.Подсказка = Надпись1.Подсказка;
	
	Надпись2 = Элементы.НадписьЧислоДлина2;
	Надпись2.Заголовок = Надпись1.Заголовок;
	Надпись2.Подсказка = Надпись1.Подсказка;
	Поле2 = Элементы.ЧислоДлина2;
	Поле2.Подсказка = Надпись1.Подсказка;
	Поле2.ТолькоПросмотр = Истина;
	
	Надпись1 = Элементы.НадписьЧислоТочность1;
	Надпись1.Заголовок = НСтр("ru = 'Точность'; en = 'Precision'"); 
	Надпись1.Подсказка = НСтр("ru = 'Точность числа'; en = 'Number precision'");
	Поле1 = Элементы.ЧислоТочность1;
	Поле1.Подсказка = Надпись1.Подсказка;
	
	Надпись2 = Элементы.НадписьЧислоТочность2;
	Надпись2.Заголовок = Надпись1.Заголовок;
	Надпись2.Подсказка = Надпись1.Подсказка;
	Поле2 = Элементы.ЧислоТочность2;
	Поле2.Подсказка = Надпись1.Подсказка;
	Поле2.ТолькоПросмотр = Истина;
	
	Поле1 = Элементы.ЧислоПоложительность1;
	Поле1.Заголовок = НСтр("ru = 'Неотрицательное'; en = 'Nonnegative'"); 
	Поле1.Подсказка = НСтр("ru = 'Признак беззнакового числа'; en = 'Unsigned number sign'");
	
	Поле2 = Элементы.ЧислоПоложительность2;
	Поле2.Заголовок = Поле1.Заголовок;
	Поле2.Подсказка = Поле1.Подсказка;
	Поле2.ТолькоПросмотр = Истина;
	
	// локализация элементов формы, связанных с квалификаторами строк
	Надпись1 = Элементы.НадписьСтрокаДлина1;
	Надпись1.Заголовок = НСтр("ru = 'Длина'; en = 'Lencth'");
	Надпись1.Подсказка = НСтр("ru = 'Длина строки'; en = 'String lencth'");
	Поле1 = Элементы.СтрокаДлина1;
	Поле1.Подсказка = Надпись1.Подсказка;
	
	Надпись2 = Элементы.НадписьСтрокаДлина2;
	Надпись2.Заголовок = Надпись1.Заголовок;
	Надпись2.Подсказка = Надпись1.Подсказка;
	Поле2 = Элементы.СтрокаДлина2;
	Поле2.Подсказка = Надпись1.Подсказка;
	Поле2.ТолькоПросмотр = Истина;
	
	Поле1 = Элементы.СтрокаФиксированность1;
	Поле1.Подсказка = НСтр("ru = 'Признак фиксированной строки'; en = 'Fixed string sign'");
	ПолеФормыУстановитьВыборИзСписка(Поле1,Ложь);
	
	Поле2 = Элементы.СтрокаФиксированность2;
	Поле2.Подсказка = Поле1.Подсказка;
	Поле2.ТолькоПросмотр = Истина;
	ПолеФормыУстановитьВыборИзСписка(Поле2,Ложь);
	
	Поле1 = Элементы.СтрокаНеограниченность1;
	Поле1.Заголовок = НСтр("ru = 'Неограниченная'; en = 'Unlimited lencth'"); 
	Поле1.Подсказка = НСтр("ru = 'Признак неограниченной строки'; en = 'Unlimited string sign'");
	
	Поле2 = Элементы.СтрокаНеограниченность2;
	Поле2.Заголовок = Поле1.Заголовок;
	Поле2.Подсказка = Поле1.Подсказка;
	Поле2.ТолькоПросмотр = Истина;
	
	// локализация элементов формы, связанных с квалификаторами двоичных данных
	Надпись1 = Элементы.НадписьBDДлина1;
	Надпись1.Заголовок = НСтр("ru = 'Длина'; en = 'Lencth'");
	Надпись1.Подсказка = НСтр("ru = 'Длина двоичных данных'; en = 'Binary data lencth'");
	Поле1 = Элементы.BDДлина1;
	Поле1.Подсказка = Надпись1.Подсказка;
	
	Надпись2 = Элементы.НадписьBDДлина2;
	Надпись2.Заголовок = Надпись1.Заголовок;
	Надпись2.Подсказка = Надпись1.Подсказка;
	Поле2 = Элементы.СтрокаДлина2;
	Поле2.Подсказка = Надпись1.Подсказка;
	Поле2.ТолькоПросмотр = Истина;
	
	Поле1 = Элементы.BDФиксированность1;
	Поле1.Подсказка = НСтр("ru = 'Признак фиксированных двоичных данных'; en = 'Fixed binary data sign'");
	ПолеФормыУстановитьВыборИзСписка(Поле1,Ложь);
	
	Поле2 = Элементы.BDФиксированность2;
	Поле2.Подсказка = Поле1.Подсказка;
	ПолеФормыУстановитьВыборИзСписка(Поле2,Ложь);
	Поле2.ТолькоПросмотр = Истина;
	
	Поле1 = Элементы.СтрокаНеограниченность1;
	Поле1.Заголовок = НСтр("ru = 'Неограниченные'; en = 'Unlimited lencth'"); 
	Поле1.Подсказка = НСтр("ru = 'Признак неограниченных двоичных данных'; en = 'Unlimited binary data sign'");
	
	Поле2 = Элементы.СтрокаНеограниченность2;
	Поле2.Заголовок = Поле1.Заголовок;
	Поле2.Подсказка = Поле1.Подсказка;
	Поле2.ТолькоПросмотр = Истина;
	
	// локализация элементов формы, связанных с квалификаторами дат
	Надпись1 = Элементы.НадписьДатаСостав1;
	Надпись1.Заголовок = НСтр("ru = 'Состав даты'; en = 'Date format'");
	Надпись1.Подсказка = НСтр("ru = 'Точность предствления даты'; en = 'Presentation date precision'");
	Поле1 = Элементы.ДатаСостав1;
	Поле1.Подсказка = Надпись1.Подсказка;
	ПолеФормыУстановитьВыборИзСписка(Поле1,Ложь);
	
	Надпись2 = Элементы.НадписьДатаСостав2;
	Надпись2.Заголовок = Надпись1.Заголовок;
	Надпись2.Подсказка = Надпись1.Подсказка;
	Поле2 = Элементы.ДатаСостав2;
	Поле2.Подсказка = Надпись1.Подсказка;
	ПолеФормыУстановитьВыборИзСписка(Поле2,Ложь);
	Поле2.ТолькоПросмотр = Истина;
	
	// локализация контекстных меню списка дерева типов (редактирование)
	Команда1 = Команды.ДеревоТиповРедактированиеСвернутьВсе;
	
	Если РежимСовместимостиРавен("Версия8_1") = Истина ИЛИ РежимСовместимостиРавен("Версия8_1") = Неопределено Тогда
		// охота на "невидимых" тушканчиков - они как бы есть, но их не видно ;))
		КартинкаС = КартинкаПоИмени("ТабличныйДокументОтображатьГруппировки",);
		КартинкаР = КартинкаПоИмени("ТабличныйДокументОтображатьГруппировки",);
	Иначе
		КартинкаС = КартинкаПоИмени("СвернутьВсе",   "ТабличныйДокументОтображатьГруппировки");
		КартинкаР = КартинкаПоИмени("РазвернутьВсе", "ТабличныйДокументОтображатьГруппировки");
	КонецЕсли; 
	
	Команда1.Заголовок = НСтр("ru = 'Свернуть все строки'; en = 'Collapse all rows'");
	Команда1.Подсказка = НСтр("ru = 'Свернуть все строки списка'; en = 'Collapse all rows of the list'");
	Команда1.Картинка = КартинкаС;
	
	Команда2 = Команды.ДеревоТиповРедактированиеРазвернутьВсе;
	Команда2.Заголовок = НСтр("ru = 'Развернуть все строки'; en = 'Expand all rows'");
	Команда2.Подсказка = НСтр("ru = 'Развернуть все строки списка'; en = 'Expand all rows of the list'");
	Команда2.Картинка = КартинкаР;
	
	Команда3 = Команды.ДеревоТиповРедактированиеПоказыватьИмена;
	Команда3.Заголовок = НСтр("ru = 'Показывать имена объектов'; en = 'Show objects names'");
	Команда3.Подсказка = НСтр("ru = 'Показывать имена объектов (иначе - показывать синонимы)'; en = 'Show objects names (else - show synonyms)'");
	
	Команда4 = Команды.ДеревоТиповИспользоватьДопОформление; // общая команда для всех 4-х списков типов
	Команда4.Заголовок = НСтр("ru = 'Использовать доп.оформление'; en = 'Use add.appearance'");
	Команда4.Подсказка = НСтр("ru = 'Использовать дополнительное оформление списка типов данных'; en = 'Use the additional appearance of the data types'' list'");
	
	ПодМенюД = Элементы.ТаблицаТиповРедактированиеТипыВВидеДереваM;
	ПодМенюД.Заголовок = НСтр("ru = 'Представление списка типов'; en = 'Types'' list representation'");
	ПодМенюД.Подсказка = НСтр("
	|ru = 'Представление списка (многоуровневое, одноуровневое дерево значений или одноуровневая таблица значений)';
	|en = 'Types'' list representation (multi-level, single-level values'' tree or single-level values'' table)'");
	
	ПодМеню = Элементы.ДеревоТиповРедактированиеТипыВВидеДереваM;
	ПодМеню.Заголовок = ПодМенюД.Заголовок;
	ПодМеню.Подсказка = ПодМенюД.Подсказка;
	
	ПодМеню = Элементы.ДеревоТиповРедактированиеПоискТипыВВидеДереваM;
	ПодМеню.Заголовок = ПодМенюД.Заголовок;
	ПодМеню.Подсказка = ПодМенюД.Подсказка;
	
	Команда01 = Команды.СписокТипов_ТипыВВидеДерева1;
	Команда01.Заголовок = НСтр("ru = 'Многоуровневое дерево'; en = 'Multi-level tree'"); 
	Команда01.Подсказка = НСтр("
	|ru = 'Представление списка типов в виде многоуровневого дерева значений';
	|en = 'Types'' list representation in the form of the multi-level values'' tree'");
	
	Команда02 = Команды.СписокТипов_ТипыВВидеДерева2;
	Команда02.Заголовок = НСтр("ru = 'Одноуровневое дерево'; en = 'Single-level tree'");	
	Команда02.Подсказка = НСтр("
	|ru = 'Представление списка типов в виде одноуровневого дерева значений';
	|en = 'Types'' list representation in the form of the single-level values'' tree'");
	
	Команда00 = Команды.СписокТипов_ТипыВВидеДерева0;
	Команда00.Заголовок = НСтр("ru = 'Одноуровневый список'; en = 'Single-level list'");
	Команда00.Подсказка = НСтр("
	|ru = 'Представление списка типов в виде одноуровневой таблицы значений';
	|en = 'Types'' list representation in the form of the single-level values'' table'");
	
	
	// локализация контекстных меню списка дерева типов (выбор)
	Команда = Команды.ДеревоТиповВыборСвернутьВсе;
	Команда.Заголовок = Команда1.Заголовок;
	Команда.Подсказка = Команда1.Подсказка;
	Команда.Картинка = КартинкаС;
	
	Команда = Команды.ДеревоТиповВыборРазвернутьВсе;
	Команда.Заголовок = Команда2.Заголовок;
	Команда.Подсказка = Команда2.Подсказка;
	Команда.Картинка = КартинкаР;
	
	Команда = Команды.ДеревоТиповВыборПоказыватьИмена;
	Команда.Заголовок = Команда3.Заголовок;
	Команда.Подсказка = Команда3.Подсказка;
	
	ПодМеню = Элементы.ТаблицаТиповВыборТипыВВидеДереваM;
	ПодМеню.Заголовок = ПодМенюД.Заголовок;
	ПодМеню.Подсказка = ПодМенюД.Подсказка;
	
	ПодМеню = Элементы.ДеревоТиповВыборТипыВВидеДереваM;
	ПодМеню.Заголовок = ПодМенюД.Заголовок;
	ПодМеню.Подсказка = ПодМенюД.Подсказка;
	
	ПодМеню = Элементы.ДеревоТиповВыборПоискТипыВВидеДереваМ;
	ПодМеню.Заголовок = ПодМенюД.Заголовок;
	ПодМеню.Подсказка = ПодМенюД.Подсказка;
	
	// локализация команд диалогов формы
	Команда11 = Команды.РедактированиеОК;
	Команда11.Заголовок = НСтр("ru = 'ОК'; en = 'OK'"); 
	
	Команда21 = Команды.РедактированиеОтмена;
	Команда21.Заголовок = НСтр("ru = 'Отмена'; en = 'Cancel'");
	
	Команда12 = Команды.ВыборОК;
	Команда12.Заголовок = Команда11.Заголовок; 
	
	Команда22 = Команды.ВыборОтмена;
	Команда22.Заголовок = Команда21.Заголовок; 
	
	// установка кнопок формы по умолчанию
	Кнопка11 = Элементы.РедактированиеОК;
	Кнопка21 = Элементы.РедактированиеОтмена;
	Если ЭтаФорма.РежимВыбораТипаДанных = Истина Тогда
		Кнопка11.КнопкаПоУмолчанию = Ложь;
		Кнопка21.КнопкаПоУмолчанию = Истина;
	Иначе
		Кнопка11.КнопкаПоУмолчанию = Истина;
		Кнопка21.КнопкаПоУмолчанию = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоТиповИзДереваЗначений(ДФСтроки,ДДСтроки,ДФИндекс,ДФПоляИндекса)
	Для каждого СтрДД Из ДДСтроки Цикл
		СтрДФ = ДФСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДФ,СтрДД);
		Если ПустаяСтрока(ДФПоляИндекса) = Ложь И ТипЗнч(ДФИндекс) = Тип("ДанныеФормыКоллекция") Тогда
			СтрДФИ = ДФИндекс.Добавить();
			ЗаполнитьЗначенияСвойств(СтрДФИ,СтрДФ,ДФПоляИндекса);
			СтрДФИ.Ид = СтрДФ.ПолучитьИдентификатор();
		КонецЕсли; 
		Если СтрДД.Строки.Количество() > 0 Тогда
			ДеревоТиповИзДереваЗначений(СтрДФ.ПолучитьЭлементы(),СтрДД.Строки,ДФИндекс,ДФПоляИндекса);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ЭтаФормаСпискиВыбораИнит()
	Поле1 = Элементы.СтрокаФиксированность1;
	Поле1.СписокВыбора.Очистить();
	Поле1.СписокВыбора.Добавить(1,НСтр("ru = 'Фиксированная'; en = 'Fixed'"));
	Поле1.СписокВыбора.Добавить(2,НСтр("ru = 'Переменная'; en = 'Variable'"));
	Поле2 = Элементы.СтрокаФиксированность2;
	Поле2.СписокВыбора.Очистить();
	Для каждого Стр Из Поле1.СписокВыбора Цикл
		ЗаполнитьЗначенияСвойств(Поле2.СписокВыбора.Добавить(),Стр);
	КонецЦикла;
	//Поле1.ШиринаВыпадающегоСписка = Поле1.Ширина; // не удается регулировать ширину списка выбора!
	
	Поле1 = Элементы.BDФиксированность1;
	Поле1.СписокВыбора.Очистить();
	Поле1.СписокВыбора.Добавить(1,НСтр("ru = 'Фиксированные'; en = 'Fixed'"));
	Поле1.СписокВыбора.Добавить(2,НСтр("ru = 'Переменные'; en = 'Variable'"));
	Поле2 = Элементы.BDФиксированность2;
	Поле2.СписокВыбора.Очистить();
	Для каждого Стр Из Поле1.СписокВыбора Цикл
		ЗаполнитьЗначенияСвойств(Поле2.СписокВыбора.Добавить(),Стр);
	КонецЦикла; 
	//Поле1.ШиринаВыпадающегоСписка = Поле1.Ширина;
	
	Поле1 = Элементы.ДатаСостав1;
	Поле1.СписокВыбора.Очистить();
	Поле1.СписокВыбора.Добавить(1,НСтр("ru = 'Дата'; en = 'Date'"));
	Поле1.СписокВыбора.Добавить(2,НСтр("ru = 'Время'; en = 'Time'"));
	Поле1.СписокВыбора.Добавить(3,НСтр("ru = 'Дата и время'; en = 'Date and time'"));
	Поле2 = Элементы.ДатаСостав2;
	Поле2.СписокВыбора.Очистить();
	Для каждого Стр Из Поле1.СписокВыбора Цикл
		ЗаполнитьЗначенияСвойств(Поле2.СписокВыбора.Добавить(),Стр);
	КонецЦикла; 
	//Поле1.ШиринаВыпадающегоСписка = Поле1.Ширина;
КонецПроцедуры

&НаСервере
Процедура ЭтаФормаИнит(СИнтерфейсом, ТекущиеТипыОтмеченные=Null)
	Перем мсВсеТипыСписка;
	
	//// ***** Изначально (в Версии 1.2 от 11.04.2016) *****
	//Если ТипЗнч(ТипыВВидеДерева) = Тип("Булево") Тогда
	//	// многоуровневое дерево типов или таблица значений типов
	//	ИспользоватьТаблицуТипов = (ТипыВВидеДерева = Ложь);
	//Иначе
	//	// одноуровневое дерево типов
	//	ТипыВВидеДерева = Ложь;
	//	ИспользоватьТаблицуТипов = Ложь;
	//КонецЕсли;
	//// ^^^^^ в Версии 1.2 от 11.04.2016 ^^^^^
	
	// установка параметров формирования списка типов
	стПараметры = Новый Структура;
	Если ТекущиеТипыОтмеченные=Null Тогда
		// "начальная" инициализация формы
		Если ТипЗнч(ТипыВВидеДерева) = Тип("Булево") Тогда
			// многоуровневое дерево типов или таблица значений типов
			ТипыВВидеДерева = ?(ТипыВВидеДерева, 1, 0);
		ИначеЕсли ТипЗнч(ТипыВВидеДерева) = Тип("Число") Тогда
			// подання списку типів за новим (хохлов в сраку!)
			Если ТипыВВидеДерева <= 0 Тогда
				//таблица значений типов
				ТипыВВидеДерева = 0;
			ИначеЕсли ТипыВВидеДерева > 0 И ТипыВВидеДерева < 2 Тогда
				//многоуровневое дерево типов
				ТипыВВидеДерева = 1;
			Иначе
				//одноуровневое дерево типов
				ТипыВВидеДерева = 2;
			КонецЕсли; 
		Иначе
			// одноуровневое дерево типов (изначально соответствует ТипыВВидеДерева=Null)
			ТипыВВидеДерева = 2;
		КонецЕсли;
		стПараметры.Вставить("ПометкаТипов",Неопределено);
	Иначе
		// смена представления списка типов
		стПараметры.Вставить("ПометкаТипов",ТекущиеТипыОтмеченные);
	КонецЕсли;

	Если РежимВыбораТипаДанных = Истина Тогда
		стПараметры.Вставить("ОтборТипов",ТипЗначения);
		стПараметры.Вставить("ВыводитьПустыеГруппыТипов",Ложь);
		Если ТипЗнч(ТекущийТип) = Тип("Тип") Тогда
			ТекущиеТипы = Новый Массив;
			ТекущиеТипы.Добавить(ТекущийТип);
			стПараметры.Вставить("ТекущиеТипы",Новый ОписаниеТипов(ТекущиеТипы));
		Иначе
			стПараметры.Вставить("ТекущиеТипы",Неопределено);
		КонецЕсли; 
	Иначе
		стПараметры.Вставить("ОтборТипов",Неопределено);
		стПараметры.Вставить("ТекущиеТипы",ТипЗначения);
	КонецЕсли; 
	стПараметры.Вставить("ПоказыватьТипBD",ПоказыватьТипBD);
	стПараметры.Вставить("ПоказыватьКонстанты",ПоказыватьКонстанты);
	стПараметры.Вставить("ПоказыватьОтчетыОбработки",ПоказыватьОтчетыОбработки);
	стПараметры.Вставить("ПоказыватьРегистры",ПоказыватьРегистры);
	стПараметры.Вставить("КраткиеИменаГруппТипов",КраткиеИменаГруппТипов);
	стПараметры.Вставить("ЭтоДерево",ТипыВВидеДерева);
	
	// получение данных списка типов
	ИспользоватьТаблицуТипов = (ТипыВВидеДерева <= 0);
	тдТипы = ТаблицаТиповИнит(стПараметры,НППМаксимальныйПометка0,мсВсеТипыСписка);
	
	// очистка данных списка типов в режиме поиска
	ДеревоТиповПоиск.ПолучитьЭлементы().Очистить();
	ДеревоТиповПоискИндекс.Очистить();
	
	// очистка текущих таблиц списка типов в форме
	СтрокиДФ = ДеревоТипов.ПолучитьЭлементы();
	СтрокиДФ.Очистить();
	ДеревоТиповИндекс.Очистить();
	ТаблицаТипов.Очистить();
	
	// заполнение списка типов в нужном представлении
	Если ИспользоватьТаблицуТипов = Ложь Тогда
		// используется дерево значений УФ
		ДеревоТиповИзДереваЗначений(СтрокиДФ,тдТипы.Строки,ДеревоТиповИндекс,"Имя,Синоним,Тип,ТипКод,ЭтоГруппа,НПП,Метка0,ТипМета");
	Иначе
		// используется таблица значений УФ
		ТаблицаТипов.Загрузить(тдТипы);
	КонецЕсли;
	
	// формирование данных таблицы значений для поиска в списке типов
	ДанныеТиповПоискАдрес = ДанныеТиповПоискИнит(тдТипы,ЭтаФорма.УникальныйИдентификатор);
	
	// инициализация интерфейса диалога
	Если СИнтерфейсом = Истина Тогда
		ЭтаФормаИнтерфейсИнит(мсВсеТипыСписка);
	КонецЕсли;
	
	// начальная установка элементов формы, связанных с поиском в списке
	Если ТекущиеТипыОтмеченные=Null Тогда
		ФормаКонтрольДеревоТиповРежимПоискаСервер();
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ВосстановитьНастройкиФормы(КлючОбъекта,Знач СтрНастройки)
	СтрНастройки = СтрЗаменить(СтрНастройки,";",",");
	СтрНастройки = СтрЗаменить(СтрНастройки,",",Символы.ПС);
	стНастройки = Новый Структура;
	Для О=1 По СтрЧислоСтрок(СтрНастройки) Цикл
		КлючНастройки = СтрПолучитьСтроку(СтрНастройки,О);
		стНастройки.Вставить(КлючНастройки,ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта,КлючНастройки));
	КонецЦикла; 
	Возврат стНастройки;
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(КлючОбъекта,стНастройки)
	Для каждого КЗ Из стНастройки Цикл
		ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта,КЗ.Ключ,КЗ.Значение);
	КонецЦикла; 
КонецПроцедуры


&НаКлиенте
Процедура ЭтаФормаПредупредить(Знач ТекстПредупреждения,ТаймАут=0,Знач СтрЗаголовок="",Пиктограмма=Неопределено)
	Если ТипЗнч(Пиктограмма) = Тип("Картинка") Тогда
		ТипФС = ТипIf("ФорматированнаяСтрока");
		Если ТипФС <> Null Тогда
			ПарФС = Новый Массив;
			ПарФС.Добавить(Пиктограмма);
			ПарФС.Добавить("  ");
			ПарФС.Добавить(ТекстПредупреждения);
			ТекстПредупреждения = Новый(ТипФС,ПарФС);
		КонецЕсли; 
	КонецЕсли; 
	Если ПустаяСтрока(СтрЗаголовок) Тогда
		СтрЗаголовок = ЭтаФорма.Заголовок;
	КонецЕсли; 
	Если ЕстьАсинхронныеМетоды() Тогда
		#Если ВебКлиент Тогда
			// если модуль формы не скомпилируется под 8.2 - материте разработчиков 1С-ных Веб-Клиентов
			// и комментарьте эту строку
			ПоказатьПредупреждение(,ТекстПредупреждения,ТаймАут,Заголовок);
		#Иначе
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,ТаймАут,Заголовок);");
		#КонецЕсли
	Иначе
		Предупреждение(ТекстПредупреждения,ТаймАут,Заголовок);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СписокТиповЭлементРеквизитОпределить(ЭлементТФС,ЭлементТФП,РеквизитТФ=Null,СтрокиТФ=Null)
	Если РежимВыбораТипаДанных = Истина Тогда
		Если ИспользоватьТаблицуТипов = Истина Тогда
			ЭлементТФС = Элементы.ТаблицаТиповВыбор;
		Иначе
			ЭлементТФС = Элементы.ДеревоТиповВыбор;
		КонецЕсли; 
		ЭлементТФП = Элементы.ДеревоТиповВыборПоиск;
	Иначе
		Если ИспользоватьТаблицуТипов = Истина Тогда
			ЭлементТФС = Элементы.ТаблицаТиповРедактирование;
		Иначе
			ЭлементТФС = Элементы.ДеревоТиповРедактирование;
		КонецЕсли; 
		ЭлементТФП = Элементы.ДеревоТиповРедактированиеПоиск;
	КонецЕсли;
	Если РеквизитТФ <> Null Тогда
		Если ИспользоватьТаблицуТипов = Истина Тогда
			РеквизитТФ = ТаблицаТипов;
		Иначе
			РеквизитТФ = ДеревоТипов;
		КонецЕсли; 
	КонецЕсли; 
	Если СтрокиТФ <> Null Тогда
		Если ИспользоватьТаблицуТипов = Истина Тогда
			СтрокиТФ = ТаблицаТипов;
		Иначе
			СтрокиТФ = ДеревоТипов.ПолучитьЭлементы();
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРазвернутьСвернуть(Элемент,СтрокиТаблицы,Развернуть)
	Если Развернуть = Истина Тогда
		Для каждого Стр Из СтрокиТаблицы Цикл
			Если Стр.ПолучитьЭлементы().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			СтрИд = Стр.ПолучитьИдентификатор();
			Если Элемент.Развернут(СтрИд) = Ложь Тогда
				Элемент.Развернуть(СтрИд);
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		Для каждого Стр Из СтрокиТаблицы Цикл
			Если Стр.ПолучитьЭлементы().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			СтрИд = Стр.ПолучитьИдентификатор();
			Если Элемент.Развернут(СтрИд) = Истина Тогда
				Элемент.Свернуть(СтрИд);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРазвернутьУзлыОтмеченныхГруппТипов(ПоТекущейПометке)
	Перем Элемент;
	Если ТипыВВидеДерева <> 1 Тогда
		Возврат;
	КонецЕсли;
	СписокТиповЭлементРеквизитОпределить(Элемент,);
	Для каждого СтрИ Из ДеревоТиповИндекс.НайтиСтроки(Новый Структура("ЭтоГруппа",Истина)) Цикл
		СтрИд = СтрИ.Ид;
		ТекДан = ДеревоТипов.НайтиПоИдентификатору(СтрИд);
		Если ?(ПоТекущейПометке=Истина,ТекДан.Метка,ТекДан.Метка0) > 0 Тогда
			Если Элемент.Развернут(СтрИд) = Ложь Тогда
				Элемент.Развернуть(СтрИд);
			КонецЕсли; 
		Иначе
			Если Элемент.Развернут(СтрИд) = Истина Тогда
				Элемент.Свернуть(СтрИд);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры


&НаКлиенте
Процедура ДеревоТиповУстановитьМеткиВСписке(ДЗ,Метка,мсМеткиНПП=Null)
	ЭтоДерево = Истина;
	Если ТипЗнч(ДЗ) = Тип("ДанныеФормыКоллекция") Тогда
		ДЗСтроки = ДЗ;
		ЭтоДерево = Ложь;
	ИначеЕсли ТипЗнч(ДЗ) = Тип("ДанныеФормыДерево") ИЛИ ТипЗнч(ДЗ) = Тип("ДанныеФормыЭлементДерева") Тогда
		ДЗСтроки = ДЗ.ПолучитьЭлементы();
	ИначеЕсли ТипЗнч(ДЗ) = Тип("ДанныеФормыКоллекцияЭлементовДерева") Тогда
		ДЗСтроки = ДЗ;
	Иначе
		Возврат;
	КонецЕсли; 
	Если мсМеткиНПП <> Null Тогда
		мсМеткиНПП = Новый Массив;
	КонецЕсли; 
	Для каждого Стр0 Из ДЗСтроки Цикл
		Если Стр0.Метка <> Метка Тогда
			Стр0.Метка = Метка;
		КонецЕсли;
		Если мсМеткиНПП <> Null И Стр0.ЭтоГруппа = Ложь Тогда
			мсМеткиНПП.Добавить(Стр0.НПП);
		КонецЕсли; 
		Если ЭтоДерево = Истина Тогда
			Для каждого Стр1 Из Стр0.ПолучитьЭлементы() Цикл
				Если Стр1.Метка <> Метка Тогда
					Стр1.Метка = Метка;
				КонецЕсли;
				Если мсМеткиНПП <> Null Тогда
					мсМеткиНПП.Добавить(Стр1.НПП);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповУстановитьМеткиВСпискеПоКодуТипа(ТипКод)
	Если ИспользоватьТаблицуТипов = Истина Тогда
		Для каждого Стр0 Из ТаблицаТипов Цикл
			Метка = ?(Стр0.ТипКод = ТипКод, 1, 0);
			Если Стр0.Метка <> Метка Тогда
				Стр0.Метка = Метка;
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		Для каждого Стр0 Из ДеревоТипов.ПолучитьЭлементы() Цикл
			Метка = ?(Стр0.ТипКод = ТипКод, 1, 0);
			Если Стр0.Метка <> Метка Тогда
				Стр0.Метка = Метка;
			КонецЕсли; 
			Для каждого Стр1 Из Стр0.ПолучитьЭлементы() Цикл
				Если Стр1.Метка <> Стр0.Метка Тогда
					Стр1.Метка = Стр0.Метка;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповУстановитьМеткиВСпискеПоФормуле(СтрФормула)
	Если ИспользоватьТаблицуТипов = Истина Тогда
		Для каждого Стр0 Из ТаблицаТипов Цикл
			Если ПустаяСтрока(СтрФормула) Тогда
				ПометитьБы = Ложь;
			Иначе
				ПометитьБы = Вычислить(СтрФормула);
			КонецЕсли;
			Метка = ?(ПометитьБы = Истина, 1, 0);
			Если Стр0.Метка <> Метка Тогда
				Стр0.Метка = Метка;
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		Для каждого Стр0 Из ДеревоТипов.ПолучитьЭлементы() Цикл
			Если ПустаяСтрока(СтрФормула) Тогда
				ПометитьБы = Ложь;
			Иначе
				ПометитьБы = Вычислить(СтрФормула);
			КонецЕсли; 
			Метка = ?(ПометитьБы = Истина, 1, 0);
			Если Стр0.Метка <> Метка Тогда
				Стр0.Метка = Метка;
			КонецЕсли; 
			Для каждого Стр1 Из Стр0.ПолучитьЭлементы() Цикл
				Если Стр1.Метка <> Метка Тогда
					Стр1.Метка = Метка;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповУстановитьМеткиВСпискеПоОписаниюТипа(ВыбОТД)
	Если ТипЗнч(ВыбОТД) <> Тип("ОписаниеТипов") Тогда
		ВыбОТД = Новый ОписаниеТипов;
	КонецЕсли; 
	Если ИспользоватьТаблицуТипов = Истина Тогда
		Для каждого Стр0 Из ТаблицаТипов Цикл
			Метка = ?(ВыбОТД.СодержитТип(Стр0.Тип), 1, 0);
			Если Стр0.Метка <> Метка Тогда
				Стр0.Метка = Метка;
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		Для каждого Стр0 Из ДеревоТипов.ПолучитьЭлементы() Цикл
			Если Стр0.ЭтоГруппа = Истина Тогда
				Для каждого Стр1 Из Стр0.ПолучитьЭлементы() Цикл
					Метка = ?(ВыбОТД.СодержитТип(Стр1.Тип), 1, 0);
					Если Стр1.Метка <> Метка Тогда
						Стр1.Метка = Метка;
					КонецЕсли;
				КонецЦикла;
				ДеревоТиповУстановитьМеткуГруппыПоПодчиненным(Стр0);
			Иначе
				Метка = ?(ВыбОТД.СодержитТип(Стр0.Тип), 1, 0);
				Если Стр0.Метка <> Метка Тогда
					Стр0.Метка = Метка;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповУстановитьМеткуГруппыПоПодчиненным(ТекРод,РодМетка=Неопределено)
	Если ТекРод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекРод.ЭтоГруппа <> Истина Тогда
		Возврат;
	КонецЕсли;
	Если РодМетка = Неопределено Тогда
		Помечено = 0;
		Строки1 = ТекРод.ПолучитьЭлементы();
		Для каждого Стр1 Из Строки1 Цикл
			Помечено = Помечено + Стр1.Метка;
		КонецЦикла;
		ТекРод.Метка = ?(Помечено=0,0,?(Помечено=Строки1.Количество(),1,2));
	Иначе
		ТекРод.Метка = РодМетка; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповАктивизироватьТекущийТип()
	Перем ЭлементТФ,СтрокиТФ;
	ТекСтр = Неопределено;
	Если ТипЗнч(ТекущийТип) = Тип("Тип") И ТекущийТип <> Тип("Неопределено") Тогда
		// если через параметры диалога указан конкретный текущий тип - пытаемся активизировать его в списке типов
		стПоиск = Новый Структура("Тип",ТекущийТип);
		Если ИспользоватьТаблицуТипов = Истина Тогда
			ТекСтр = ДеревоТиповНайтиСтроку(ТаблицаТипов,ДеревоТиповИндекс,,стПоиск);
		Иначе
			ТекСтр = ДеревоТиповНайтиСтроку(ДеревоТипов,ДеревоТиповИндекс,,стПоиск);
		КонецЕсли; 
	КонецЕсли;
	Если ТекСтр = Неопределено И РежимВыбораТипаДанных <> Истина Тогда
		// если в параметрах диалога текущий тип не указан или указанный тип не найден в списке типов -
		// - активизируем последнюю "по-порядку" исходно отмеченную строку списка (так ведет себя системный диалог)
		Если НППМаксимальныйПометка0 > 0 Тогда
			стПоиск = Новый Структура("НПП",НППМаксимальныйПометка0);
			Если ИспользоватьТаблицуТипов = Истина Тогда
				ТекСтр = ДеревоТиповНайтиСтроку(ТаблицаТипов,ДеревоТиповИндекс,,стПоиск);
			Иначе
				ТекСтр = ДеревоТиповНайтиСтроку(ДеревоТипов,ДеревоТиповИндекс,,стПоиск);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	СписокТиповЭлементРеквизитОпределить(ЭлементТФ,,Null,СтрокиТФ);
	Если ТекСтр <> Неопределено Тогда
		ЭлементТФ.ТекущаяСтрока = ТекСтр.ПолучитьИдентификатор();
	КонецЕсли;
	Если ТипыВВидеДерева = 1 И СтрокиТФ.Количество() = 1 Тогда
		Стр0 = СтрокиТФ[0].ПолучитьИдентификатор();
		Если ЭлементТФ.Развернут(Стр0) <> Истина Тогда
			ЭлементТФ.Развернуть(Стр0);
		КонецЕсли; 
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = ЭлементТФ;
КонецПроцедуры
 

// процедуры и функции обработки выбора значения типа данных

&НаКлиенте
Функция квЧислаПолучить(Еррор)
	ТипКВ = ТипIf("КвалификаторыЧисла");
	ПарКВ = Новый Массив;
	ПарКВ.Добавить(ЧислоДлина);
	ПарКВ.Добавить(ЧислоТочность);
	ПарКВ.Добавить(ДопустимыйЗнак[?(ЧислоПоложительность,"Неотрицательный","Любой")]);
	Попытка
		КВ = Новый(ТипКВ,ПарКВ);
	Исключение
		Еррор = Истина;
		ЕррорСтрока = 
		НСтр("ru = 'Ошибка создания объекта класса ""КвалификаторыЧисла"" '; en = 'Error creating object of class ""NumberQualifiers"" :'"); 
		Сообщить(ЕррорСтрока + Символы.ПС + ОписаниеОшибки(),СтатусСообщения.Внимание);
	КонецПопытки;
	Возврат КВ; 
КонецФункции

&НаКлиенте
Функция квСтрокиПолучить(Еррор)
	ТипКВ = ТипIf("КвалификаторыСтроки");
	ПарКВ = Новый Массив;
	ПарКВ.Добавить(СтрокаДлина);
	ПарКВ.Добавить(ДопустимаяДлина[?(СтрокаФиксированность=1,"Фиксированная","Переменная")]);
	Попытка
		КВ = Новый(ТипКВ,ПарКВ);
	Исключение
		Еррор = Истина;
		ЕррорСтрока = НСтр("ru = 'Ошибка создания объекта класса ""КвалификаторыСтроки"" '; en = 'Error creating object of class ""StringQualifiers"" :'"); 
		Сообщить(ЕррорСтрока + Символы.ПС + ОписаниеОшибки(),СтатусСообщения.Внимание);
	КонецПопытки;
	Возврат КВ; 
КонецФункции

&НаКлиенте
Функция квДатыПолучить(Еррор)
	ТипКВ = ТипIf("КвалификаторыДаты");
	ПарКВ = Новый Массив;
	ПарКВ.Добавить(ЧастиДаты[?(ДатаСостав=1,"Дата",?(ДатаСостав=2,"Время","ДатаВремя"))]);
	Попытка
		КВ = Новый(ТипКВ,ПарКВ);
	Исключение
		Еррор = Истина;
		ЕррорСтрока = НСтр("ru = 'Ошибка создания объекта класса ""КвалификаторыДаты"" '; en = 'Error creating object of class ""DateQualifiers"" :'"); 
		Сообщить(ЕррорСтрока + Символы.ПС + ОписаниеОшибки(),СтатусСообщения.Внимание);
	КонецПопытки;
	Возврат КВ; 
КонецФункции

&НаКлиенте
Функция квДДПолучить(Еррор)
	ТипКВ = ТипIf("КвалификаторыДвоичныхДанных");
	ПарКВ = Новый Массив;
	ПарКВ.Добавить(BDДлина);
	ПарКВ.Добавить(ДопустимаяДлина[?(BDФиксированность=1,"Фиксированная","Переменная")]);
	Попытка
		КВ = Новый(ТипКВ,ПарКВ);
	Исключение
		Еррор = Истина;
		ЕррорСтрока = НСтр("ru = 'Ошибка создания объекта класса ""КвалификаторыДвоичныхДанных"" '; en = 'Error creating object of class ""BinaryDataQualifiers"" :'") + Символы.ПС + ОписаниеОшибки(); 
		Сообщить(ЕррорСтрока + Символы.ПС + ОписаниеОшибки(),СтатусСообщения.Внимание);
	КонецПопытки;
	Возврат КВ; 
КонецФункции

&НаКлиенте
Функция отдПолучить(мсТипы,ЕррорИнфо="")
	Перем Еррор;
	ТипОТ = ТипIf("ОписаниеТипов");
	ПарОТ = Новый Массив;
	ПарОТ.Добавить(мсТипы);
	ПарОТ.Добавить(квЧислаПолучить(Еррор));
	ПарОТ.Добавить(квСтрокиПолучить(Еррор));
	ПарОТ.Добавить(квДатыПолучить(Еррор));
	Если ЕстьКвалификаторыBD = Истина Тогда
		ПарОТ.Добавить(квДДПолучить(Еррор));
	КонецЕсли; 
	Если Еррор = Истина Тогда
		ЕррорИнфо = НСтр("ru = 'Ошибки при создании объектов квалификаторов данных!'; en = 'Error when creating object of the data qualifiers!'"); 
		Возврат Неопределено;
	КонецЕсли; 
	Попытка
		ОТД = Новый(ТипОТ,ПарОТ);
	Исключение
		ЕррорИнфо = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки; 
	Возврат ОТД;
КонецФункции

&НаКлиенте
Функция РедактируемыйТипПолучить()
	Перем ЭлементТФ,РеквизитТ,СтрокиТФ;
	Перем ЕррорИнфо;
	Если РежимВыбораТипаДанных <> Ложь Тогда
		Возврат Неопределено;
	КонецЕсли; 
	СписокТиповЭлементРеквизитОпределить(ЭлементТФ,,РеквизитТ,СтрокиТФ);
	мсТипы = Новый Массив;
	Для каждого ТекДан0 Из СтрокиТФ Цикл
		Если ТекДан0.Метка = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ТекДан0.ЭтоГруппа = Истина Тогда
			мсТипыГ = Неопределено;
			Если ТекДан0.Метка = 1 Тогда
				мсТипыГ = ВычислитьНаСервереБезКонтекста(ТекДан0.Тип);
			КонецЕсли;
			Если ТипЗнч(мсТипыГ) = Тип("Массив") Тогда
				Для каждого Тип Из мсТипыГ Цикл
					Если ТипЗнч(Тип) = Тип("Тип") Тогда
						мсТипы.Добавить(Тип);
					КонецЕсли; 
				КонецЦикла; 
			Иначе
				Для каждого ТекДан1 Из ТекДан0.ПолучитьЭлементы() Цикл
					Если ТекДан1.Метка = 1 Тогда
						мсТипы.Добавить(ТекДан1.Тип);
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли; 
		Иначе
			Если ТекДан0.Метка = 1 Тогда
				мсТипы.Добавить(ТекДан0.Тип);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если мсТипы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТипЗначения1 = отдПолучить(мсТипы,ЕррорИнфо);
	Если ЗначениеЗаполнено(ЕррорИнфо) Тогда
		ТекстПредупреждения = НСтр("ru = 'Ошибка создания объекта класса ""ОписаниеТипов"" !'; en = 'Error creating object of class ""TypeDescription"" !'");
		ЭтаФормаПредупредить(ТекстПредупреждения+Символы.ПС+ЕррорИнфо,,,БиблиотекаКартинок.Остановить);
		Возврат Неопределено;
	КонецЕсли; 
	Возврат ТипЗначения1;
КонецФункции 

&НаКлиенте
Функция ВыбранныйТипПолучить()
	Перем ЭлементТФ,РеквизитТ;
	Перем ЕррорИнфо;
	Если РежимВыбораТипаДанных <> Истина Тогда
		Возврат Неопределено;
	КонецЕсли; 
	СписокТиповЭлементРеквизитОпределить(ЭлементТФ,,РеквизитТ);
	Если ЭлементТФ.ТекущаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТекДан = РеквизитТ.НайтиПоИдентификатору(ЭлементТФ.ТекущаяСтрока);
	Если ТекДан = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ТекДан.ЭтоГруппа = Истина Тогда
		Если ТипыВВидеДерева = 1 И ЭлементТФ.Развернут(ТекДан.ПолучитьИдентификатор()) <> Истина Тогда
			ЭлементТФ.Развернуть(ТекДан.ПолучитьИдентификатор());
		КонецЕсли; 
		Возврат Неопределено;
	КонецЕсли;
	мсТипы = Новый Массив;
	мсТипы.Добавить(ТекДан.Тип);
	ТипЗначения1 = отдПолучить(мсТипы,ЕррорИнфо);
	Если ЗначениеЗаполнено(ЕррорИнфо) Тогда
		ТекстПредупреждения = НСтр("ru = 'Ошибка создания объекта класса ""ОписаниеТипов"" !'; en = 'Error creating object of class ""TypeDescription"" !'");
		ЭтаФормаПредупредить(ТекстПредупреждения+Символы.ПС+ЕррорИнфо,,,БиблиотекаКартинок.Остановить);
		Возврат Неопределено;
	КонецЕсли; 
	Возврат ТипЗначения1;
КонецФункции

&НаКлиенте
Процедура ВыполнитьВыборНаКлиенте(РезультатВыбора)
		ПерезаписатьИспользуемыеТипы(РезультатВыбора);
КонецПроцедуры


// процедуры и функции контроля свойств формы и свойств элементов формы

&НаСервере
Процедура ФормаКонтрольДеревоТиповРежимПоискаСервер()
	Если РежимВыбораТипаДанных = Истина Тогда
		Элемент = Элементы.СтрокаПоиска2;
		ПиктоСП = Элементы.СтрокаПоискаПикто2;
		ПанельС = Элементы.СтраницыДеревоТиповВыбор;
	Иначе
		Элемент = Элементы.СтрокаПоиска1;
		ПиктоСП = Элементы.СтрокаПоискаПикто1;
		ПанельС = Элементы.СтраницыДеревоТиповРедактирование;
	КонецЕсли;
	ДеревоТиповРежимПоиска = 0;
	СтрокаПоиска = "";
	СтрокаПоиска0 = СтрокаПоиска;
	Элемент.ЦветТекста = ЦветТекстаПоля;
	Элемент.ЦветФона = ЦветФонаПоля;
	Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,,,Ложь);
	Элемент.РедактированиеТекста = Истина;
	ПиктоСП.Картинка = Новый Картинка;
	Если РежимВыбораТипаДанных = Истина Тогда
		Если ИспользоватьТаблицуТипов = Истина Тогда
			СтраницаИма = "СтраницаДеревоТиповВыборТаблица";
		Иначе
			СтраницаИма = "СтраницаДеревоТиповВыборДерево";
		КонецЕсли; 
	Иначе
		Если ИспользоватьТаблицуТипов = Истина Тогда
			СтраницаИма = "СтраницаДеревоТиповРедактированиеТаблица"; 
		Иначе
			СтраницаИма = "СтраницаДеревоТиповРедактированиеДерево"; 
		КонецЕсли; 
	КонецЕсли;
	ПанельС.ТекущаяСтраница = Элементы[СтраницаИма];
КонецПроцедуры

&НаКлиенте
Процедура ФормаКонтрольДеревоТиповРежимПоискаКлиент(ПриВводеТекста=Ложь)
	Если РежимВыбораТипаДанных = Истина Тогда
		Элемент = Элементы.СтрокаПоиска2;
		ПиктоСП = Элементы.СтрокаПоискаПикто2;
		ПанельС = Элементы.СтраницыДеревоТиповВыбор;
	Иначе
		Элемент = Элементы.СтрокаПоиска1;
		ПиктоСП = Элементы.СтрокаПоискаПикто1;
		ПанельС = Элементы.СтраницыДеревоТиповРедактирование;
	КонецЕсли; 
	Если ДеревоТиповРежимПоиска = 2 Тогда
		// показ только отмеченных строк в списке типов
		СтрокаПоиска = ДеревоТиповРежимПоиска2СтрокаПоиска();
		СтрокаПоиска0 = СтрокаПоиска;
	ИначеЕсли ДеревоТиповРежимПоиска = 1 Тогда
		// показ результатов поиска по строке в списке типов
		Если ПустаяСтрока(СтрокаПоиска) ИЛИ (СокрЛП(НРег(СтрокаПоиска)) = НРег(ДеревоТиповРежимПоиска2СтрокаПоиска())) Тогда
			Если ПриВводеТекста <> Истина Тогда
				СтрокаПоиска  = "%"; // дурацкий крайний случай (строка поиска не должна быть пустой или специальной)
				СтрокаПоиска0 = СтрокаПоиска;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		// "обычный" режим без показа отбора в списке типов
		Если ДеревоТиповРежимПоиска <> 0 Тогда
			ДеревоТиповРежимПоиска = 0;
		КонецЕсли;
		Если СтрДлина(СтрокаПоиска) > 0 Тогда
			СтрокаПоиска = "";
		КонецЕсли;
		СтрокаПоиска0 = СтрокаПоиска;
	КонецЕсли;
	Если ДеревоТиповРежимПоиска = 2 Тогда
		Элемент.ЦветТекста = WebЦвета.Ультрамарин;
		Элемент.ЦветФона = ЦветФонаФормы;
		Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,,,Истина);
		Элемент.РедактированиеТекста = Ложь;
	ИначеЕсли ДеревоТиповРежимПоиска = 1 Тогда
		Элемент.ЦветТекста = ЦветТекстаПоля;
		Элемент.ЦветФона = ЦветФонаПоля;
		Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,,,Ложь);
		Элемент.РедактированиеТекста = Истина;
	Иначе
		Элемент.ЦветТекста = ЦветТекстаПоля;
		Элемент.ЦветФона = ЦветФонаПоля;
		Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,,,Ложь);
		Элемент.РедактированиеТекста = Истина;
	КонецЕсли;
	Если ДеревоТиповРежимПоиска = 2 Тогда
		ПиктоСП.Картинка = БиблиотекаКартинок.УстановитьФлажки;
	Иначе
		ПиктоСП.Картинка = Новый Картинка;
	КонецЕсли; 
	Если ДеревоТиповРежимПоиска > 0 Тогда
		Если РежимВыбораТипаДанных = Истина Тогда
			СтраницаИма = "СтраницаДеревоТиповВыборПоиск";
		Иначе
			СтраницаИма = "СтраницаДеревоТиповРедактированиеПоиск";
		КонецЕсли;
	Иначе
		Если РежимВыбораТипаДанных = Истина Тогда
			Если ИспользоватьТаблицуТипов = Истина Тогда
				СтраницаИма = "СтраницаДеревоТиповВыборТаблица";
			Иначе
				СтраницаИма = "СтраницаДеревоТиповВыборДерево";
			КонецЕсли; 
		Иначе
			Если ИспользоватьТаблицуТипов = Истина Тогда
				СтраницаИма = "СтраницаДеревоТиповРедактированиеТаблица"; 
			Иначе
				СтраницаИма = "СтраницаДеревоТиповРедактированиеДерево"; 
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	ПанельС.ТекущаяСтраница = Элементы[СтраницаИма];
	
	Если СокрЛП(Элемент.ТекстРедактирования) <> СокрЛП(СтрокаПоиска) Тогда
		// це тут великое шаманство - на@би разработчиков платформы!
		ЭтаФорма.ПодключитьОбработчикОжидания("ОЖ_ПолеСтрокаПоискаОбновить",0.1,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОЖ_ПолеСтрокаПоискаОбновить()
	Если РежимВыбораТипаДанных = Истина Тогда
		Элемент = Элементы.СтрокаПоиска2;
	Иначе
		Элемент = Элементы.СтрокаПоиска1;
	КонецЕсли; 
	Попытка
		Элемент.ОбновитьТекстРедактирования();
	Исключение
		Сообщить("ОЖ_ПолеСтрокаПоискаОбновить >>>"+Символы.ПС+ОписаниеОшибки());
	КонецПопытки;
	ЭтаФорма.ОтключитьОбработчикОжидания("ОЖ_ПолеСтрокаПоискаОбновить");
КонецПроцедуры
 

&НаКлиенте
Процедура ФормаКонтрольЧислоДлина()
	Если ЧислоДлина > ЧислоДлинаМакс Тогда
		 ЧислоДлина = ЧислоДлинаМакс;
	КонецЕсли; 
	Если ЧислоДлина < ЧислоТочность  Тогда
		ЧислоТочность = ЧислоДлина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ФормаКонтрольЧислоТочность()
	Если ЧислоТочность > ЧислоДлинаМакс Тогда
		 ЧислоТочность = ЧислоДлинаМакс;
	КонецЕсли; 
	Если ЧислоТочность > ЧислоДлина Тогда
		ЧислоДлина = ЧислоТочность;
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ФормаКонтрольСтрокаДлина()
	Если СтрокаДлина > СтрокаДлинаМакс Тогда
		СтрокаДлина = СтрокаДлинаМакс;
	КонецЕсли;
	Если СтрокаДлина = 0 И СтрокаНеограниченность <> Истина Тогда
		СтрокаНеограниченность = Истина;
		ФормаКонтрольСтрокаНеограниченность();
	ИначеЕсли СтрокаДлина <> 0 И СтрокаНеограниченность <> Ложь Тогда
		СтрокаНеограниченность = Ложь;
		ФормаКонтрольСтрокаНеограниченность();
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ФормаКонтрольСтрокаНеограниченность()
	Если СтрокаНеограниченность = Истина Тогда
		// "неограниченная" строка -  
		Если СтрокаДлина <> 0 Тогда
			// - нулевой длины
			СтрокаДлина = 0;
		КонецЕсли;
		Если СтрокаФиксированность <> 2 Тогда
			// - и "переменная"
			СтрокаФиксированность = 2;
		КонецЕсли; 
	Иначе
		// "ограниченная" строка -
		Если СтрокаДлина = 0 Тогда
			// - длина по "умолчанию"
			СтрокаДлина = 10;
		КонецЕсли; 
	КонецЕсли;
	Элементы.СтрокаФиксированность1.ТолькоПросмотр = (СтрокаНеограниченность = Истина);
	Элементы.СтрокаФиксированность2.ТолькоПросмотр = (СтрокаНеограниченность = Истина);
КонецПроцедуры


&НаКлиенте
Процедура ФормаКонтрольBDДлина()
	Если BDДлина > BDДлинаМакс Тогда
		СтрокаДлина = BDДлинаМакс;
	КонецЕсли;
	Если BDДлина = 0 И BDНеограниченность <> Истина Тогда
		BDНеограниченность = Истина;
		ФормаКонтрольBDНеограниченность();
	ИначеЕсли BDДлина <> 0 И BDНеограниченность <> Ложь Тогда
		BDНеограниченность = Ложь;
		ФормаКонтрольBDНеограниченность();
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ФормаКонтрольBDНеограниченность()
	Если BDНеограниченность = Истина Тогда
		// "неограниченные" двоичные данные -  
		Если BDДлина <> 0 Тогда
			// - нулевой длины
			BDДлина = 0;
		КонецЕсли;
		Если BDФиксированность <> 2 Тогда
			// - и "переменные"
			BDФиксированность = 2;
		КонецЕсли; 
	Иначе
		// "ограниченные" двоичные данные -
		Если BDДлина = 0 Тогда
			// - по умолчанию пусть будет максимальная длина
			BDДлина = BDДлинаМакс;
		КонецЕсли; 
	КонецЕсли;
	Элементы.BDФиксированность1.ТолькоПросмотр = (BDНеограниченность = Истина);
	Элементы.BDФиксированность2.ТолькоПросмотр = (BDНеограниченность = Истина);
КонецПроцедуры


&НаКлиенте
Процедура ФормаКонтрольИспользоватьДопОформление()	
	Элементы["ДеревоТиповИспользоватьДопОформление1"].Пометка = ИспользоватьДопОформление;
	Элементы["ДеревоТиповИспользоватьДопОформление2"].Пометка = ИспользоватьДопОформление;
	Элементы["ДеревоТиповИспользоватьДопОформление3"].Пометка = ИспользоватьДопОформление;
	Элементы["ДеревоТиповИспользоватьДопОформление4"].Пометка = ИспользоватьДопОформление;
	Элементы["ДеревоТиповИспользоватьДопОформление5"].Пометка = ИспользоватьДопОформление;
	Элементы["ДеревоТиповИспользоватьДопОформление6"].Пометка = ИспользоватьДопОформление;
КонецПроцедуры

&НаКлиенте
Процедура ФормаКонтрольПоказыватьИменаОбъектов(ЭтоРедактированиеТипаДанных)
	Элементы["ДеревоТиповРедактированиеПоказыватьИмена1"].Пометка = ПоказыватьИменаОбъектов;
	Элементы["ДеревоТиповРедактированиеПоказыватьИмена2"].Пометка = ПоказыватьИменаОбъектов;
	Элементы["ДеревоТиповРедактированиеПоказыватьИмена3"].Пометка = ПоказыватьИменаОбъектов;
	Элементы["ДеревоТиповВыборПоказыватьИмена1"].Пометка = ПоказыватьИменаОбъектов;
	Элементы["ДеревоТиповВыборПоказыватьИмена2"].Пометка = ПоказыватьИменаОбъектов;
	Элементы["ДеревоТиповВыборПоказыватьИмена3"].Пометка = ПоказыватьИменаОбъектов;
	Если ЭтоРедактированиеТипаДанных = Истина Тогда
		Если ИспользоватьТаблицуТипов = Истина Тогда
			КолонкаИ = Элементы.ТаблицаТиповРедактированиеИмя;
			КолонкаС = Элементы.ТаблицаТиповРедактированиеСиноним;
		Иначе
			КолонкаИ = Элементы.ДеревоТиповРедактированиеИмя;
			КолонкаС = Элементы.ДеревоТиповРедактированиеСиноним;
		КонецЕсли; 
	Иначе
		Если ИспользоватьТаблицуТипов = Истина Тогда
			КолонкаИ = Элементы.ТаблицаТиповВыборИмя;
			КолонкаС = Элементы.ТаблицаТиповВыборСиноним;
		Иначе
			КолонкаИ = Элементы.ДеревоТиповВыборИмя;
			КолонкаС = Элементы.ДеревоТиповВыборСиноним;
		КонецЕсли; 
	КонецЕсли;
	Если КолонкаИ.Видимость <> (ПоказыватьИменаОбъектов = Истина) Тогда
		КолонкаИ.Видимость = (ПоказыватьИменаОбъектов = Истина);
	КонецЕсли; 
	Если КолонкаС.Видимость <> (ПоказыватьИменаОбъектов <> Истина) Тогда
		КолонкаС.Видимость = (ПоказыватьИменаОбъектов <> Истина);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ФормаКонтрольПоказыватьИменаОбъектовПриОткрытии()
	ФормаКонтрольПоказыватьИменаОбъектов(РежимВыбораТипаДанных <> Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияПрочитать()
	// устанавливаем признак составного типа
	ТипыТипа = ТипЗначения.Типы();
	СоставнойТипДанных = (ТипЗначения.Типы().Количество() <> 1);
	
	// считываем квалификаторы чисел
	ЧислоДлина = ТипЗначения.КвалификаторыЧисла.Разрядность;
	ЧислоТочность = ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	ЧислоПоложительность = (ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный);
	ФормаКонтрольЧислоДлина();
	ФормаКонтрольЧислоТочность();

	// считываем квалификаторы строк
	СтрокаДлина = ТипЗначения.КвалификаторыСтроки.Длина;
	ПараметрКС = ТипЗначения.КвалификаторыСтроки.ДопустимаяДлина;
	Если ПараметрКС = ДопустимаяДлина.Фиксированная Тогда
		СтрокаФиксированность = 1;
	ИначеЕсли ПараметрКС = ДопустимаяДлина.Переменная Тогда
		СтрокаФиксированность = 2;
	Иначе
		СтрокаФиксированность = 2;
	КонецЕсли; 
	ФормаКонтрольСтрокаДлина();
	
	// считываем квалификаторы двоичных данных
	Если ЕстьКвалификаторыBD = Истина Тогда
		BDДлина = ТипЗначения.КвалификаторыДвоичныхДанных.Длина;
		ПараметрКС = ТипЗначения.КвалификаторыДвоичныхДанных.ДопустимаяДлина;
	Иначе
		BDДлина = 0;
		ПараметрКС = Неопределено;
	КонецЕсли;
	Если ПараметрКС = ДопустимаяДлина.Фиксированная Тогда
		BDФиксированность = 1;
	ИначеЕсли ПараметрКС = ДопустимаяДлина.Переменная Тогда
		BDФиксированность = 2;
	Иначе
		BDФиксированность = 2;
	КонецЕсли; 
	ФормаКонтрольBDДлина();
	
	// считываем квалификаторы дат
	ПараметрКС = ТипЗначения.КвалификаторыДаты.ЧастиДаты;
	Если ПараметрКС = ЧастиДаты.Дата Тогда
		ДатаСостав = 1;
	ИначеЕсли ПараметрКС = ЧастиДаты.Время Тогда
		ДатаСостав = 2;
	ИначеЕсли ПараметрКС = ЧастиДаты.ДатаВремя Тогда
		ДатаСостав = 3;
	Иначе
		ДатаСостав = 3;
	КонецЕсли;
	
	// разворачиваем отмеченыые группы типов данных
	ДеревоТиповРазвернутьУзлыОтмеченныхГруппТипов(Ложь);
	
	// устанавливаем текущую строку в списке типов
	ДеревоТиповАктивизироватьТекущийТип();
	
	// устанавливаем текущую страницу панели квалификаторов типа значений
	ФормаКонтрольСписокТиповТекущаяСтрока(Неопределено);
	
	// устанавливаем данные отмеченной строки списка типов для простого типа 
	НПППростойТип = 0;
	НППОтмеченный = 0;
	Если СоставнойТипДанных = Ложь Тогда
		стПоиск = Новый Структура("ЭтоГруппа,Метка0",Ложь,1);
		Если ИспользоватьТаблицуТипов = Истина Тогда
			ОтмеченнаяСтрока = ДеревоТиповНайтиСтроку(ТаблицаТипов,,,стПоиск);
		Иначе
			ОтмеченнаяСтрока = ДеревоТиповНайтиСтроку(ДеревоТипов,ДеревоТиповИндекс,,стПоиск);
		КонецЕсли; 
		Если ОтмеченнаяСтрока <> Неопределено Тогда
			НПППростойТип = ОтмеченнаяСтрока.НПП;
		КонецЕсли; 
	КонецЕсли;
	
	Если РежимВыбораТипаДанных = Истина Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска2;
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска1;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ФормаКонтрольСоставнойТипДанныхПриИзменении()
	Перем ЭлементТФС,ЭлементТФП,РеквизитТ,СтрокиДТ;
	Если РежимВыбораТипаДанных = Истина Тогда
		Возврат;
	КонецЕсли;
	НПППростойТип = 0;
	Если СоставнойТипДанных = Истина Тогда
		Возврат;
	КонецЕсли;
	СписокТиповЭлементРеквизитОпределить(ЭлементТФС,ЭлементТФП,РеквизитТ,СтрокиДТ);
	Если НППОтмеченный = 0 Тогда
		// отмечаем первую отмеченную строку в списке типов (с приоритетом результатов поиска)
		Если ДеревоТиповРежимПоиска > 0 Тогда
			НПП = ДеревоТиповНайтиПервуюОтмеченную(ДеревоТиповПоиск,);
			Если НПП = 0 Тогда
				НПП = ДеревоТиповНайтиПервуюОтмеченную(РеквизитТ,);
			КонецЕсли; 
		Иначе
			НПП = ДеревоТиповНайтиПервуюОтмеченную(РеквизитТ,);
		КонецЕсли; 
	Иначе
		// отмечаем строку в списке типов, отмеченную подчеркиванием при двойном клике
		НПП = НППОтмеченный;
	КонецЕсли; 
	Если ДеревоТиповРежимПоиска > 0 Тогда
		ДеревоТиповУстановитьМеткиВСписке(ДеревоТиповПоиск,0);
	КонецЕсли; 
	ДеревоТиповУстановитьМеткиВСписке(РеквизитТ,0);
	ТекДанС = ДеревоТиповНайтиСтроку(РеквизитТ,ДеревоТиповИндекс,НПП);
	Если ДеревоТиповРежимПоиска > 0 Тогда
		ЭлементТФ = ЭлементТФП;
		ТекДанП = ДеревоТиповНайтиСтроку(ДеревоТиповПоиск,ДеревоТиповПоискИндекс,НПП);
	Иначе
		ЭлементТФ = ЭлементТФС;
		ТекДанП = Неопределено;
	КонецЕсли;
	Если ТекДанС<>Неопределено Тогда
		ТекДанС.Метка = 1;
		Если ТипыВВидеДерева = 1 Тогда
			ТекРод = ТекДанС.ПолучитьРодителя();
			Если ТекРод <> Неопределено Тогда
				ТекРод.Метка = ?(ТекРод.ПолучитьЭлементы().Количество()=1,1,2);
			КонецЕсли; 
		КонецЕсли;
		Если ДеревоТиповРежимПоиска > 0 Тогда
			Если ТекДанП <> Неопределено Тогда
				ТекДанП.Метка = 1;
				Если ТипыВВидеДерева = 1 Тогда
					ТекРодС = ТекДанС.ПолучитьРодителя();
					ТекРодП = ТекДанП.ПолучитьРодителя();
					Если ТекРодП <> Неопределено И ТекРодС <> Неопределено Тогда
						ТекРодП.Метка = ТекРодС.Метка;
					КонецЕсли; 
				КонецЕсли; 
				ЭлементТФ.ТекущаяСтрока = ТекДанП.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			ЭлементТФ.ТекущаяСтрока = ТекДанС.ПолучитьИдентификатор();
		КонецЕсли; 
		НПППростойТип = ТекДанС.НПП; 
	КонецЕсли; 
	Если ДеревоТиповРежимПоиска > 0 И ТекДанП <> Неопределено Тогда
		ФормаКонтрольСписокТиповТекущаяСтрока(ТекДанП);
	Иначе
		ФормаКонтрольСписокТиповТекущаяСтрока(ТекДанС);
	КонецЕсли; 
	НППОтмеченный = 0;
КонецПроцедуры

&НаКлиенте
Процедура ФормаКонтрольСписокТиповТекущаяСтрока(ТекущиеДанные=Неопределено)
	Перем ЭлементТФ,РеквизитТ;
	Если ТекущиеДанные = Неопределено Тогда
		СписокТиповЭлементРеквизитОпределить(ЭлементТФ,,РеквизитТ);
		Если ЭлементТФ.ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = РеквизитТ.НайтиПоИдентификатору(ЭлементТФ.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли; 
	Суффикс = ?(РежимВыбораТипаДанных=Ложь,"1","2");
	Если ТекущиеДанные = Неопределено Тогда
		// Пустой список типов...
		СтраницаИмя = "КвалификаторыПустая";
	Иначе
		Если ТекущиеДанные.ТипКод = 1 Тогда
			// Числа
			СтраницаИмя = "КвалификаторыЧисел";
		ИначеЕсли ТекущиеДанные.ТипКод = 2 Тогда
			// Строки
			СтраницаИмя = "КалификаторыСтрок";
		ИначеЕсли ТекущиеДанные.ТипКод = 3 Тогда
			// Дата
			СтраницаИмя = "КвалификаторыДат";
		ИначеЕсли ТекущиеДанные.ТипКод = 4 Тогда
			// Булево
			СтраницаИмя = "КвалификаторыПустая";
		ИначеЕсли ТекущиеДанные.ТипКод = 5 Тогда
			// ДвоичныеДанные
			Если ЕстьКвалификаторыBD = Истина Тогда
				СтраницаИмя = "КвалификаторыBD";
			Иначе
				СтраницаИмя = "КвалификаторыПустая";
			КонецЕсли; 
		Иначе
			// Прочее...
			СтраницаИмя = "КвалификаторыПустая";
		КонецЕсли;
	КонецЕсли;
	ПанельСтраниц = Элементы["ПанельКвалификаторы"+Суффикс];
	Страница = Элементы[СтраницаИмя+Суффикс];
	Если ПанельСтраниц.ТекущаяСтраница <> Страница Тогда
		ПанельСтраниц.ТекущаяСтраница = Страница;
	КонецЕсли;
	// фрагмент ниже потенциально может приводить к неявным серверным вызовам.
	// закомментарить при тормозах в форме при активизации строк списка типов !!!
	Если РежимВыбораТипаДанных=Ложь И СтраницаИмя<>"КвалификаторыПустая" Тогда
		// вызов сервера при установке доступности страницы тормоэит форму
		//Страница.Доступность = ТекущиеДанные.Метка;
		Для каждого ЭлементП Из Страница.ПодчиненныеЭлементы Цикл
			// а так все работает приемлемо
			ЭлементП.Доступность = ТекущиеДанные.Метка;
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры


// обработчики событий формы

&НаСервере
Процедура ЭтаФормаПараметрыПрочитатьНаСервере()
	Параметры.Свойство("ЗаголовокДиалога",ЗаголовокДиалога);
	Параметры.Свойство("РежимВыбораТипаДанных",РежимВыбораТипаДанных);
	Параметры.Свойство("ТипыВВидеДерева",ТипыВВидеДерева);
	Параметры.Свойство("ТипыВВидеДереваИмяРеквизита",ТипыВВидеДереваИмяРеквизита);
	Параметры.Свойство("ПоказыватьТипBD",Ложь);
	Параметры.Свойство("ПоказыватьКонстанты",Ложь);
	Параметры.Свойство("ПоказыватьОтчетыОбработки",Ложь);
	Параметры.Свойство("ПоказыватьРегистры",Ложь);
	Параметры.Свойство("КраткиеИменаГруппТипов",КраткиеИменаГруппТипов);
	Параметры.Свойство("ТипЗначения",ТипЗначения);
	Параметры.Свойство("ТекущийТип",ТекущийТип);
	
	Выборка = РегистрыСведений.C2D_ТипыДанныхШаблонов.Выбрать();
	Если Выборка.Следующий() Тогда
		ТипЗначения = Выборка.Типы.получить();
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтаФормаПараметрыПрочитатьНаСервере();
	Если ТипыВВидеДерева = Null Тогда
		// соответствует использованию одноуровнего дерева значений типов
		ТипыВВидеДерева = 2; // для обратной совместимости
	ИначеЕсли ТипыВВидеДерева = Истина Тогда
		// соответствует использованию многоуровнего дерева значений типов
		ТипыВВидеДерева = 1; // для обратной совместимости
	ИначеЕсли ТипыВВидеДерева = Ложь Тогда
		// соответствует использованию таблицы значений типов
		ТипыВВидеДерева = 0; // для обратной совместимости
	ИначеЕсли ТипЗнч(ТипыВВидеДерева) = Тип("Число") Тогда
		Если ТипыВВидеДерева <= 0 Тогда
			// использование таблицы значений типов
			ТипыВВидеДерева = 0; 
		ИначеЕсли ТипыВВидеДерева > 0 И ТипыВВидеДерева < 2 Тогда
			// использование многоуровнего дерева значений типов
			ТипыВВидеДерева = 1; 
		Иначе
			// использование одноуровнего дерева значений типов
			ТипыВВидеДерева = 2; 
		КонецЕсли; 
	Иначе
		// по умолчанию используется список типов в виде многоуровнего дерева
		ТипыВВидеДерева = 1;
	КонецЕсли; 
	ЦветФонаФормы = ЦветаСтиля.ЦветФонаФормы;
	ЦветФонаПоля = ЦветаСтиля.ЦветФонаПоля;
	ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	ЭтаФормаСпискиВыбораИнит();
	ЭтаФормаИнит(Истина); // инициализация с интерфейсом
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	стНастройки = ВосстановитьНастройкиФормы(КлючНастроекФормы,ПоляНастроекФормы);
	Если стНастройки.ПоказыватьИменаОбъектов = Неопределено Тогда
		стНастройки.ПоказыватьИменаОбъектов = Истина;
	КонецЕсли;
	Если стНастройки.ИспользоватьДопОформление = Неопределено Тогда
		//стНастройки.ИспользоватьДопОформление = Истина;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтаФорма,стНастройки,ПоляНастроекФормы);
	ФормаКонтрольТипыВВидеДерева();
	ФормаКонтрольПоказыватьИменаОбъектовПриОткрытии();
	ФормаКонтрольИспользоватьДопОформление();
	ТипЗначенияПрочитать();
	
	Если ЗначениеЗаполнено(ТипЗначения) тогда
		ДеревоТиповРежимПоиска = 2;
		ДеревоТиповОбновитьПоиск_Режим2();
		ФормаКонтрольДеревоТиповРежимПоискаКлиент(Ложь);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	//ЭтаФормаПараметрыПрочитатьНаСервере();
	ЭтаФормаИнит(Ложь); // инициализация без интерфейса
	ФормаКонтрольТипыВВидеДерева();
	ФормаКонтрольПоказыватьИменаОбъектовПриОткрытии();
	ФормаКонтрольИспользоватьДопОформление();
	ТипЗначенияПрочитать();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	аа = аа;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	стНастройки = Новый Структура(ПоляНастроекФормы);
	ЗаполнитьЗначенияСвойств(стНастройки,ЭтаФорма,ПоляНастроекФормы);
	СохранитьНастройкиФормы(КлючНастроекФормы,стНастройки);
КонецПроцедуры


// обработчики команд формы

&НаКлиенте
Процедура ДеревоТиповИспользоватьДопОформление(Команда)
	ИспользоватьДопОформление = НЕ ИспользоватьДопОформление;
	ФормаКонтрольИспользоватьДопОформление();	
КонецПроцедуры


// обработчики элементов диалога редактирования типа

&НаКлиенте
Процедура СоставнойТипДанныхПриИзменении(Элемент)
	ФормаКонтрольСоставнойТипДанныхПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура НадписьСоставнойТипДанныхНажатие(Элемент)
	СоставнойТипДанных = НЕ СоставнойТипДанных;
	ФормаКонтрольСоставнойТипДанныхПриИзменении();
КонецПроцедуры


// строка поиска в имени или синониме типа

&НаКлиенте
Функция СимволыПоискаВыделить(ТекстПоиска)
	СимволыПоиска = СтрЗаменить(ТекстПоиска," ","");
	Для о = 1 По СтрДлина(СтрокаПоискаСпецСимволы) Цикл
		СимволыПоиска = СтрЗаменить(СимволыПоиска,СтрПолучитьСтроку(СтрокаПоискаСпецСимволы,о),"");
	КонецЦикла; 
	Возврат СимволыПоиска;
КонецФункции

&НаКлиенте
Процедура ДеревоТиповПриИзмененииПоиска(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	// це тут великое шаманство - на@би разработчиков платформы!
	СтандартнаяОбработка = Истина;
	Если СтрДлина(СимволыПоискаВыделить(Текст)) = 0 Тогда
		//СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить("");
		СбросПоискаВыполнить();
	Иначе
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(Текст);
		СтрокаПоиска = Текст;
		Если СтрДлина(СимволыПоискаВыделить(Текст)) <= 2 Тогда
			Возврат;
		КонецЕсли;
		ДеревоТиповРежимПоиска = 1;
		ДеревоТиповОбновитьПоиск_Режим1(Текст,СтрокаПоиска0);
	КонецЕсли; 
	ФормаКонтрольДеревоТиповРежимПоискаКлиент(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ДеревоТиповРежимПоиска = 2 Тогда
		ДеревоТиповОбновитьПоиск_Режим2();
	Иначе
		Если СокрЛП(НРег(СтрокаПоиска)) = НРег(ДеревоТиповРежимПоиска2СтрокаПоиска()) Тогда
			СтрокаПоиска = "";
			СтрокаПоиска0 = "";
		КонецЕсли; 
		ДеревоТиповРежимПоиска = ?(ПустаяСтрока(СтрокаПоиска),0,1);
		Если ДеревоТиповРежимПоиска = 1 Тогда
			ДеревоТиповОбновитьПоиск_Режим1(СтрокаПоиска,СтрокаПоиска0);
		Иначе
			ДеревоТиповОбновитьПоиск_Режим0();
		КонецЕсли;
	КонецЕсли; 
	ФормаКонтрольДеревоТиповРежимПоискаКлиент(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоискСбросить(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	//Сообщить("СтрокаПоискаИзменениеТекстаРедактирования()");
	//ДеревоТиповПриИзмененииПоиска(Элемент, Элемент.ТекстРедактирования, , СтандартнаяОбработка);
	//ДеревоТиповПриИзмененииПоиска(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	//Сообщить("СтрокаПоискаАвтоПодбор()");
	ДеревоТиповПриИзмененииПоиска(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	//Сообщить("СтрокаПоискаОкончаниеВводаТекста()");
	Если ДеревоТиповРежимПоиска = 1 И СтрокаПоиска0 = Текст Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли; 
	ДеревоТиповПриИзмененииПоиска(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПиктоНажатие(Элемент)
	ПоискТолькоОтмеченные(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура ПоискАктивизировать(Команда)
	Если РежимВыбораТипаДанных = Истина Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска2;
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска1;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПоискТолькоОтмеченные(Команда)
	Если ДеревоТиповРежимПоиска = 2 Тогда
		ДеревоТиповРежимПоиска = 0;
		ДеревоТиповОбновитьПоиск_Режим0();
	Иначе
		ДеревоТиповРежимПоиска = 2;
		ДеревоТиповОбновитьПоиск_Режим2();
	КонецЕсли; 
	ФормаКонтрольДеревоТиповРежимПоискаКлиент(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПоискСбросить(Команда)
	Перем ЭлементТФ;
	Если РежимВыбораТипаДанных = Истина Тогда
		Элемент = Элементы.СтрокаПоиска2;
	Иначе
		Элемент = Элементы.СтрокаПоиска1;
	КонецЕсли;
	Если ДеревоТиповРежимПоиска <> 0 ИЛИ СтрДлина(СтрокаПоиска) > 0 Тогда
		СбросПоискаВыполнить();
	КонецЕсли;
	//// непонятно как сбросить настройки отбора строк в списке по Ctrl+F
	//Если ИспользоватьТаблицуТипов = Истина Тогда 
	//	СписокТиповЭлементРеквизитОпределить(ЭлементТФ,);
	//	ЭлементТФ.ОтборСтрок = Неопределено;
	//КонецЕсли;
	ФормаКонтрольДеревоТиповРежимПоискаКлиент(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СбросПоискаВыполнить()
	ДеревоТиповРежимПоиска = 0;
	СтрокаПоиска = "";
	ДеревоТиповОбновитьПоиск_Режим0();
КонецПроцедуры


&НаКлиенте
Процедура ЧислоДлинаПриИзменении(Элемент)
	ФормаКонтрольЧислоДлина();
КонецПроцедуры

&НаКлиенте
Процедура ЧислоТочностьПриИзменении(Элемент)
	ФормаКонтрольЧислоТочность();
КонецПроцедуры

&НаКлиенте
Процедура ЧислоПоложительностьПриИзменении(Элемент)
	
КонецПроцедуры


&НаКлиенте
Процедура СтрокаДлинаПриИзменении(Элемент)
	ФормаКонтрольСтрокаДлина();
КонецПроцедуры

&НаКлиенте
Процедура СтрокаФиксированностьПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаНеограниченностьПриИзменении(Элемент)
	ФормаКонтрольСтрокаНеограниченность();
КонецПроцедуры


&НаКлиенте
Процедура BDДлинаПриИзменении(Элемент)
	ФормаКонтрольBDДлина();
КонецПроцедуры

&НаКлиенте
Процедура BDФиксированностьПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура BDНеограниченностьПриИзменении(Элемент)
	ФормаКонтрольBDНеограниченность();
КонецПроцедуры


// список типов в режиме редактирования (дерево значений)

&НаКлиенте
Процедура ДеревоТиповРедактированиеПриВыборе(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Перем РеквизитТФ;
	СтандартнаяОбработка = Ложь;
	Если ДеревоТиповРежимПоиска > 0 Тогда
		ТекущиеДанные = ДеревоТиповПоиск.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Иначе
		СписокТиповЭлементРеквизитОпределить(,,РеквизитТФ);
		ТекущиеДанные = РеквизитТФ.НайтиПоИдентификатору(ВыбраннаяСтрока);
	КонецЕсли; 
	Если ТекущиеДанные.ЭтоГруппа = Ложь И СоставнойТипДанных = Истина Тогда
		Если НППОтмеченный = ТекущиеДанные.НПП Тогда
			НППОтмеченный = 0;
		Иначе
			НППОтмеченный = ТекущиеДанные.НПП;
		КонецЕсли; 
	Иначе
		НППОтмеченный = 0;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРедактированиеПриПометке(ТекДан,ВТаблицеПоиска)
	Перем ЭлементТФ,РеквизитТФ,СтрокиТФ,ТекДанС;
	Если ТекДан = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокТиповЭлементРеквизитОпределить(ЭлементТФ,,РеквизитТФ,СтрокиТФ);
	Если ВТаблицеПоиска = Истина Тогда
		мсСогласоватьНПП = Новый Массив;
	КонецЕсли; 
	Если ТекДан.ЭтоГруппа = Истина Тогда
		Если СоставнойТипДанных = Истина Тогда
			Если ТекДан.Метка > 1 Тогда
				ТекДан.Метка = 0;
			КонецЕсли;
			Для каждого Стр1 Из ТекДан.ПолучитьЭлементы() Цикл
				Стр1.Метка = ТекДан.Метка;
				Если ВТаблицеПоиска = Истина Тогда
					мсСогласоватьНПП.Добавить(Стр1.НПП);
				КонецЕсли; 
			КонецЦикла; 
		Иначе
			ДеревоТиповУстановитьМеткуГруппыПоПодчиненным(ТекДан);
		КонецЕсли; 
	Иначе
		Если ТекДан.Метка > 1 Тогда
			ТекДан.Метка = 0;
		КонецЕсли;
		Если ТипыВВидеДерева = 1 Тогда
			ТекРод = ТекДан.ПолучитьРодителя();
		КонецЕсли; 
		РодМетка = Неопределено; 
		Если СоставнойТипДанных = Истина Тогда
		Иначе
			Если ТекДан.Метка = 1 Тогда
				ОтмеченнаяСтрока = Неопределено;
				Если НПППростойТип > 0 Тогда
					Если ВТаблицеПоиска Тогда
						ОтмеченнаяСтрока = ДеревоТиповНайтиСтроку(ДеревоТиповПоиск,ДеревоТиповПоискИндекс,НПППростойТип);
					КонецЕсли; 
					Если ОтмеченнаяСтрока = Неопределено Тогда
						ОтмеченнаяСтрока = ДеревоТиповНайтиСтроку(РеквизитТФ,ДеревоТиповИндекс,НПППростойТип);
					КонецЕсли; 
				КонецЕсли; 
				Если ОтмеченнаяСтрока <> Неопределено И ОтмеченнаяСтрока <> ТекДан Тогда
					ОтмеченнаяСтрока.Метка = 0;
					Если ТипыВВидеДерева = 1 Тогда
						ДеревоТиповУстановитьМеткуГруппыПоПодчиненным(ОтмеченнаяСтрока.ПолучитьРодителя(),0);
					КонецЕсли;
					Если ВТаблицеПоиска = Истина Тогда
						мсСогласоватьНПП.Добавить(ОтмеченнаяСтрока.НПП);
					КонецЕсли; 
				КонецЕсли;
				Если ТипыВВидеДерева = 1 И ТекРод <> Неопределено Тогда
					РодМетка = ?(ТекРод.ПолучитьЭлементы().Количество()=1,1,2);
				КонецЕсли; 
				НПППростойТип = ТекДан.НПП;
			Иначе
				РодМетка = 0;
				НПППростойТип = 0;
			КонецЕсли; 
		КонецЕсли;
		Если ВТаблицеПоиска = Истина Тогда
			мсСогласоватьНПП.Добавить(ТекДан.НПП);
		КонецЕсли;
		Если ТипыВВидеДерева = 1 Тогда
			ДеревоТиповУстановитьМеткуГруппыПоПодчиненным(ТекДан.ПолучитьРодителя(),РодМетка);
		КонецЕсли; 
	КонецЕсли;
	Если ВТаблицеПоиска = Истина Тогда
		// согласуем метки в таблице поиска с метками в списке типов
		Если ТипыВВидеДерева = 1 Тогда
			соРодители = Новый Соответствие;
		КонецЕсли; 
		стПоиск = Новый Структура("НПП");
		Для каждого НПП Из мсСогласоватьНПП Цикл
			стПоиск.НПП = НПП;
			ТекДанС = ДеревоТиповНайтиСтроку(РеквизитТФ,ДеревоТиповИндекс,,стПоиск);
			ТекДанП = ДеревоТиповНайтиСтроку(ДеревоТиповПоиск,ДеревоТиповПоискИндекс,,стПоиск);
			Если ТекДанС <> Неопределено И ТекДанП <> Неопределено Тогда
				ТекДанС.Метка = ТекДанП.Метка;
				Если ТипыВВидеДерева = 1 Тогда
					ТекРодС = ТекДанС.ПолучитьРодителя();
					Если ТекРодС <> Неопределено Тогда
						соРодители[ТекРодС] = Истина;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		Если ТипыВВидеДерева = 1 Тогда
			Для каждого КЗ Из соРодители Цикл
				ДеревоТиповУстановитьМеткуГруппыПоПодчиненным(КЗ.Ключ);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	ФормаКонтрольСписокТиповТекущаяСтрока(ТекДан);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРедактированиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДеревоТиповРедактированиеПриВыборе(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРедактированиеПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		ТекДан = ДеревоТипов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	КонецЕсли;
	Если ТекДан = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаКонтрольСписокТиповТекущаяСтрока(ТекДан);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРедактированиеНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРедактированиеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Отказ = Истина;
КонецПроцедуры
	
&НаКлиенте
Процедура ДеревоТиповРедактированиеМеткаПриИзменении(Элемент)
	ЭлементТФ = Элементы.ДеревоТиповРедактирование;
	РеквизитТ = ДеревоТипов;
	Если ЭлементТФ.ТекущаяСтрока <> Неопределено Тогда
		ТекДан = РеквизитТ.НайтиПоИдентификатору(ЭлементТФ.ТекущаяСтрока);
	КонецЕсли;
	ДеревоТиповРедактированиеПриПометке(ТекДан,Ложь);
КонецПроцедуры


// список типов в режиме редактирования (таблица значений)

&НаКлиенте
Процедура ТаблицаТиповРедактированиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДеревоТиповРедактированиеПриВыборе(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка); 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТиповРедактированиеПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		ТекДан = ТаблицаТипов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	КонецЕсли;
	Если ТекДан = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаКонтрольСписокТиповТекущаяСтрока(ТекДан);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТиповРедактированиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТиповРедактированиеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТиповРедактированиеМеткаПриИзменении(Элемент)
	ЭлементТФ = Элементы.ТаблицаТиповРедактирование;
	РеквизитТ = ТаблицаТипов;
	Если ЭлементТФ.ТекущаяСтрока <> Неопределено Тогда
		ТекДан = РеквизитТ.НайтиПоИдентификатору(ЭлементТФ.ТекущаяСтрока);
	КонецЕсли;
	ДеревоТиповРедактированиеПриПометке(ТекДан,Ложь);
КонецПроцедуры


// таблица результатов поиска в режиме редактирования

&НаКлиенте
Процедура ДеревоТиповРедактированиеПоискВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДеревоТиповРедактированиеПриВыборе(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРедактированиеПоискПриАктивизацииСтроки(Элемент)
	Перем ЭлеменТФС;
	Перем РеквизитТФ;
	ТекСтрП = Элемент.ТекущаяСтрока;
	Если ТекСтрП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанП = ДеревоТиповПоиск.НайтиПоИдентификатору(ТекСтрП);
	Если ТекДанП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокТиповЭлементРеквизитОпределить(ЭлеменТФС,,РеквизитТФ);
	ТекДанС = ДеревоТиповНайтиСтроку(РеквизитТФ,ДеревоТиповИндекс,ТекДанП.НПП);
	Если ТекДанС = Неопределено Тогда
		ФормаКонтрольСписокТиповТекущаяСтрока(ТекДанП);
	Иначе
		ЭлеменТФС.ТекущаяСтрока = ТекДанС.ПолучитьИдентификатор();
		//ФормаКонтрольСписокТиповТекущаяСтрока(ТекДанС); // вызывается в событии <ЭлеменТФС>ПриАктивизацииСтроки
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРедактированиеПоискПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРедактированиеПоискПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРедактированиеПоискМеткаПриИзменении(Элемент)
	ЭлементТФ = Элементы.ДеревоТиповРедактированиеПоиск;
	РеквизитТ = ДеревоТиповПоиск;
	Если ЭлементТФ.ТекущаяСтрока <> Неопределено Тогда
		ТекДан = РеквизитТ.НайтиПоИдентификатору(ЭлементТФ.ТекущаяСтрока);
	КонецЕсли;
	ДеревоТиповРедактированиеПриПометке(ТекДан,Истина);
	Если ДеревоТиповРежимПоиска = 2 Тогда
		// пометка влияет на результат "поиска"
		Элементы.СтрокаПоиска1.КнопкаВыбора = Истина;
	КонецЕсли; 
КонецПроцедуры


// обработчики команд диалога редактирования типа

&НаКлиенте
Процедура ДеревоТиповПриУстановкеМеткиВсехТипов(ВыбМетка)
	Перем ЭлементТФС;
	Перем ЭлементТФП;
	Перем РеквизитТФ;
	Перем СтрокиТФ;
	СписокТиповЭлементРеквизитОпределить(ЭлементТФС,ЭлементТФП,РеквизитТФ,СтрокиТФ);
	СоставнойТипДанных = Истина;
	НПППростойТип = 0;
	НППОтмеченный = 0;
	Если ДеревоТиповРежимПоиска > 0 Тогда
		мсСогласоватьНПП = Неопределено;
		ДеревоТиповУстановитьМеткиВСписке(ДеревоТиповПоиск,ВыбМетка,мсСогласоватьНПП); 
		ДеревоТиповРазвернутьСвернуть(ЭлементТФП,ДеревоТиповПоиск.ПолучитьЭлементы(),Ложь);
		Если ТипыВВидеДерева = 1 Тогда
			соРодители = Новый Соответствие;
		КонецЕсли; 
		стПоиск = Новый Структура("НПП");
		Для каждого НПП Из мсСогласоватьНПП Цикл
			стПоиск.НПП = НПП;
			ТекДанС = ДеревоТиповНайтиСтроку(РеквизитТФ,ДеревоТиповИндекс,,стПоиск);
			Если ТекДанС <> Неопределено Тогда
				ТекДанС.Метка = ВыбМетка;
				Если ТипыВВидеДерева = 1 Тогда
					ТекРодС = ТекДанС.ПолучитьРодителя();
					Если ТекРодС <> Неопределено Тогда
						соРодители[ТекРодС] = Истина;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		Если ТипыВВидеДерева = 1 Тогда
			Для каждого КЗ Из соРодители Цикл
				ДеревоТиповУстановитьМеткуГруппыПоПодчиненным(КЗ.Ключ);
			КонецЦикла; 
		КонецЕсли; 
		Если ДеревоТиповРежимПоиска = 2 Тогда
			Элементы.СтрокаПоиска1.КнопкаВыбора = Истина;
		КонецЕсли; 
	Иначе
		ДеревоТиповУстановитьМеткиВСписке(РеквизитТФ,ВыбМетка);
		Если ТипыВВидеДерева = 1 Тогда
			ДеревоТиповРазвернутьСвернуть(ЭлементТФС,СтрокиТФ,Ложь);
		КонецЕсли; 
	КонецЕсли; 
	ФормаКонтрольСписокТиповТекущаяСтрока(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповУстановитьВсеТипы(Команда)
	ДеревоТиповПриУстановкеМеткиВсехТипов(1);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповСброситьВсеТипы(Команда)
	ДеревоТиповПриУстановкеМеткиВсехТипов(0);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповУстановитьТипВсеСсылки(Команда)
	//101  СправочникСсылка
	//102  ДокументСсылка
	//103  ПеречислениеСсылка
	//104  ПланВидовХарактеристикСсылка
	//105  ПланСчетовСсылка
	//106  ПланВидовРасчетаСсылка
	//107  БизнесПроцессСсылка
	//108  ТочкаМаршрутаБизнесПроцессаСсылка
	//109  ЗадачаСсылка
	//110  ПланОбменаСсылка
	Имя0 = "ДеревоТиповУстановитьТипВсеСсылки";
	Имя0Длина = СтрДлина(Имя0);
	ИмяК = СокрЛП(Команда.Имя);
	Если СтрДлина(ИмяК) = Имя0Длина Тогда
		ТипКод = Неопределено;
	Иначе
		Попытка
			ТипКод = Цел(Сред(ИмяК,Имя0Длина+1));
		Исключение
			ТипКод = -1;
		КонецПопытки;
	КонецЕсли;
	Если ТипКод = Неопределено Тогда
		// тип "ЛюбаяСсылка"
		ДеревоТиповУстановитьМеткиВСпискеПоФормуле("Стр0.ТипКод > 100 И Стр0.ТипКод < 200");
	ИначеЕсли ТипЗнч(ТипКод)=Тип("Число") И ТипКод > 100 И ТипКод < 200 Тогда
		// тип "ВсеСсылки" опредеденного типа
		ДеревоТиповУстановитьМеткиВСпискеПоКодуТипа(ТипКод);
	Иначе
		// непредумотренный тип - игнорируем
		Возврат;
	КонецЕсли; 
	СоставнойТипДанных = Истина;
	НПППростойТип = 0;
	НППОтмеченный = 0;
	Если ДеревоТиповРежимПоиска > 0 Тогда
		ДеревоТиповПоискСогласоватьПометку();
	КонецЕсли; 
	Если ДеревоТиповРежимПоиска = 2 Тогда
		Элементы.СтрокаПоиска1.КнопкаВыбора = Истина;
	КонецЕсли; 
	ФормаКонтрольСписокТиповТекущаяСтрока(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповУстановитьТипПВХ(Команда)
	ИмяПВХ = СтрЗаменить(Команда.Имя,"ДеревоТиповУстановитьТипПВХ_","");
	ВыбОТД = ВычислитьНаСервереБезКонтекста("Метаданные.ПланыВидовХарактеристик."+ИмяПВХ+".Тип");
	ДеревоТиповУстановитьПоОписаниюТипа(ВыбОТД);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповУстановитьТипОПТ(Команда)
	ИмяОПТ = СтрЗаменить(Команда.Имя,"ДеревоТиповУстановитьТипОПТ_","");
	ВыбОТД = ВычислитьНаСервереБезКонтекста("Метаданные.ОпределяемыеТипы."+ИмяОПТ+".Тип");
	ДеревоТиповУстановитьПоОписаниюТипа(ВыбОТД);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповУстановитьПоОписаниюТипа(ВыбОТД)
	Перем ЭлементТФС;
	Перем ЭлементТФП;
	Перем РеквизитТФ;
	ДеревоТиповУстановитьМеткиВСпискеПоОписаниюТипа(ВыбОТД);
	СоставнойТипДанных = (ВыбОТД.Типы().Количество()<>1);
	НПППростойТип = 0;
	НППОтмеченный = 0;
	Если ДеревоТиповРежимПоиска > 0 Тогда
		ДеревоТиповПоискСогласоватьПометку();
	Иначе
		ДеревоТиповРазвернутьУзлыОтмеченныхГруппТипов(Истина);
	КонецЕсли;
	Если СоставнойТипДанных = Истина Тогда
		ФормаКонтрольСписокТиповТекущаяСтрока(Неопределено);
	Иначе
		СписокТиповЭлементРеквизитОпределить(ЭлементТФС,ЭлементТФП,РеквизитТФ);
		ОтмеченнаяСтрока = Неопределено;
		Если ДеревоТиповРежимПоиска > 0 Тогда
			НПППростойТип = ДеревоТиповНайтиПервуюОтмеченную(ДеревоТиповПоиск,ОтмеченнаяСтрока);
			Если НПППростойТип = 0 Тогда
				НПППростойТип = ДеревоТиповНайтиПервуюОтмеченную(РеквизитТФ,);
			КонецЕсли; 
			Если ОтмеченнаяСтрока <> Неопределено Тогда
				ЭлементТФП.ТекущаяСтрока = ОтмеченнаяСтрока.ПолучтьИдентификатор();
			КонецЕсли; 
		Иначе
			НПППростойТип = ДеревоТиповНайтиПервуюОтмеченную(РеквизитТФ,ОтмеченнаяСтрока);
			Если ОтмеченнаяСтрока <> Неопределено Тогда
				ЭлементТФС.ТекущаяСтрока = ОтмеченнаяСтрока.ПолучтьИдентификатор();
			КонецЕсли; 
		КонецЕсли; 
		ФормаКонтрольСписокТиповТекущаяСтрока(ОтмеченнаяСтрока);
	КонецЕсли; 
	Если ДеревоТиповРежимПоиска = 2 Тогда
		Элементы.СтрокаПоиска1.КнопкаВыбора = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьЗначениеТипаДанных(Команда)
	Перем СтрокиТФ;
	Если ДеревоТиповРежимПоиска > 0 Тогда
		ПоискСбросить(Команда);
	КонецЕсли; 
	СписокТиповЭлементРеквизитОпределить(,,,СтрокиТФ);
	Для каждого Стр0 Из СтрокиТФ Цикл
		Стр0.Метка = Стр0.Метка0;
		Если Стр0.ЭтоГруппа = Истина Тогда
			Для каждого Стр1 Из Стр0.ПолучитьЭлементы() Цикл
				Стр1.Метка = Стр1.Метка0;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	ТипЗначенияПрочитать();
	НППОтмеченный = 0;
КонецПроцедуры


&НаКлиенте
Процедура ДеревоТиповРедактированиеСвернутьВсе(Команда)
	Если ТипыВВидеДерева = 1 Тогда
		Если ДеревоТиповРежимПоиска > 0 Тогда
			ДеревоТиповРазвернутьСвернуть(Элементы.ДеревоТиповРедактированиеПоиск,ДеревоТиповПоиск.ПолучитьЭлементы(),Ложь);
		Иначе
			ДеревоТиповРазвернутьСвернуть(Элементы.ДеревоТиповРедактирование,ДеревоТипов.ПолучитьЭлементы(),Ложь);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРедактированиеРазвернутьВсе(Команда)
	Если ТипыВВидеДерева = 1 Тогда
		Если ДеревоТиповРежимПоиска > 0 Тогда
			ДеревоТиповРазвернутьСвернуть(Элементы.ДеревоТиповРедактированиеПоиск,ДеревоТиповПоиск.ПолучитьЭлементы(),Истина);
		Иначе
			ДеревоТиповРазвернутьСвернуть(Элементы.ДеревоТиповРедактирование,ДеревоТипов.ПолучитьЭлементы(),Истина);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповРедактированиеПоказыватьИмена(Команда)
	ПоказыватьИменаОбъектов = НЕ ПоказыватьИменаОбъектов;
	ФормаКонтрольПоказыватьИменаОбъектов(Истина);
	Если ДеревоТиповРежимПоиска = 1 Тогда
		// результат поиска зависит от визуального представления типа в списке
		Элементы.СтрокаПоиска1.КнопкаВыбора = Истина;
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура РедактированиеТипаЗавершить()
	РезультатВыбора = РедактируемыйТипПолучить();

	ВыполнитьВыборНаКлиенте(РезультатВыбора); 
КонецПроцедуры
 
&НаКлиенте
Процедура РедактированиеОК(Команда)
	 РедактированиеТипаЗавершить();
	 ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеОтмена(Команда)
	ЭтаФорма.Закрыть(Неопределено);
КонецПроцедуры


// обработчики событий элементов диалога выбора типа

// список типов в режиме выбора типа значения (дерево значений)

&НаКлиенте
Процедура ДеревоТиповВыборПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		ТекДан = ДеревоТипов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	КонецЕсли;
	Если ТекДан = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаКонтрольСписокТиповТекущаяСтрока(ТекДан);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповВыборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповВыборПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповВыборМеткаПриИзменении(Элемент)
	ЭлементТФ = Элементы.ДеревоТиповВыбор;
	РеквизитТ = ДеревоТипов;
	Если ЭлементТФ.ТекущаяСтрока <> Неопределено Тогда
		ТекДан = РеквизитТ.НайтиПоИдентификатору(ЭлементТФ.ТекущаяСтрока);
	КонецЕсли;
	Если ТекДан = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// изменение пометки в режиме выбора типа бесмысленна - восстановим исходное значение
	ТекДан.Метка = ТекДан.Метка0;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповВыборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыборТипаЗавершить();
КонецПроцедуры


// список типов в режиме выбора типа значения  (таблица значений)

&НаКлиенте
Процедура ТаблицаТиповВыборПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		ТекДан = ТаблицаТипов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	КонецЕсли;
	Если ТекДан = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаКонтрольСписокТиповТекущаяСтрока(ТекДан);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТиповВыборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТиповВыборПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТиповВыборМеткаПриИзменении(Элемент)
	ЭлементТФ = Элементы.ТаблицаТиповВыбор;
	РеквизитТ = ТаблицаТипов;
	Если ЭлементТФ.ТекущаяСтрока <> Неопределено Тогда
		ТекДан = РеквизитТ.НайтиПоИдентификатору(ЭлементТФ.ТекущаяСтрока);
	КонецЕсли;
	Если ТекДан = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// изменение пометки в режиме выбора типа бесмысленна - восстановим исходное значение
	ТекДан.Метка = ТекДан.Метка0;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТиповВыборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыборТипаЗавершить();
КонецПроцедуры


// таблица результатов поиска в режиме выбора типа значения

&НаКлиенте
Процедура ДеревоТиповВыборПоискВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыборТипаЗавершить();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповВыборПоискПриАктивизацииСтроки(Элемент)
	Перем ЭлеменТФС;
	Перем РеквизитТФ;
	ТекСтрП = Элемент.ТекущаяСтрока;
	Если ТекСтрП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанП = ДеревоТиповПоиск.НайтиПоИдентификатору(ТекСтрП);
	Если ТекДанП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокТиповЭлементРеквизитОпределить(ЭлеменТФС,,РеквизитТФ);
	ТекДанС = ДеревоТиповНайтиСтроку(РеквизитТФ,ДеревоТиповИндекс,ТекДанП.НПП);
	Если ТекДанС = Неопределено Тогда
		ФормаКонтрольСписокТиповТекущаяСтрока(ТекДанП);
	Иначе
		ЭлеменТФС.ТекущаяСтрока = ТекДанС.ПолучитьИдентификатор();
		//ФормаКонтрольСписокТиповТекущаяСтрока(ТекДанС); // вызывается в событии <ЭлеменТФС>ПриАктивизацииСтроки
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповВыборПоискПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповВыборПоискПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповВыборПоискМеткаПриИзменении(Элемент)
	ЭлементТФ = Элементы.ТаблицаТиповВыборПоиск;
	РеквизитТ = ДеревоТиповПоиск;
	Если ЭлементТФ.ТекущаяСтрока <> Неопределено Тогда
		ТекДан = РеквизитТ.НайтиПоИдентификатору(ЭлементТФ.ТекущаяСтрока);
	КонецЕсли;
	Если ТекДан = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// изменение пометки в режиме выбора типа бесмысленна - восстановим исходное значение
	ТекДан.Метка = ТекДан.Метка0;
КонецПроцедуры


// обработчики команд диалога выбора типа

&НаКлиенте
Процедура ДеревоТиповВыборСвернутьВсе(Команда)
	Если ТипыВВидеДерева = 1 Тогда
		Если ДеревоТиповРежимПоиска > 0 Тогда
			ДеревоТиповРазвернутьСвернуть(Элементы.ДеревоТиповВыборПоиск,ДеревоТиповПоиск.ПолучитьЭлементы(),Ложь);
		Иначе
			ДеревоТиповРазвернутьСвернуть(Элементы.ДеревоТиповВыбор,ДеревоТипов.ПолучитьЭлементы(),Ложь);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповВыборРазвернутьВсе(Команда)
	Если ТипыВВидеДерева = 1 Тогда
		Если ДеревоТиповРежимПоиска > 0 Тогда
			ДеревоТиповРазвернутьСвернуть(Элементы.ДеревоТиповВыборПоиск,ДеревоТиповПоиск.ПолучитьЭлементы(),Истина);
		Иначе
			ДеревоТиповРазвернутьСвернуть(Элементы.ДеревоТиповВыбор,ДеревоТипов.ПолучитьЭлементы(),Истина);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповВыборПоказыватьИмена(Команда)
	ПоказыватьИменаОбъектов = НЕ ПоказыватьИменаОбъектов;
	ФормаКонтрольПоказыватьИменаОбъектов(Ложь);
	Если ДеревоТиповРежимПоиска = 1 Тогда
		// результат поиска зависит от визуального представления типа в списке
		Элементы.СтрокаПоиска2.КнопкаВыбора = Истина;
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ВыборТипаЗавершить()
	РезультатВыбора = ВыбранныйТипПолучить();
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ВыполнитьВыборНаКлиенте(РезультатВыбора); 
КонецПроцедуры

&НаКлиенте
Процедура ВыборОК(Команда)
	ВыборТипаЗавершить();
КонецПроцедуры

&НаКлиенте
Процедура ВыборОтмена(Команда)
	ЭтаФорма.Закрыть(Неопределено);
КонецПроцедуры


// обработчики команд переключения представления списка типов

&НаКлиенте
Функция ОпределитьФормуВладельцаДиалога(ТотОбъект, ИмяРекв)
	// попытаемся определить форму из которой открыт диалог
	// по атрибутам "ОписаниеОповещенияОЗакрытии" или "ВладелецФормы"
	ТаФорма = Неопределено;
	Попытка
		Оповещение = ЭтаФорма.ОписаниеОповещенияОЗакрытии;
	Исключение
		Оповещение = Null;
	КонецПопытки;
	Если ТипЗнч(Оповещение) = ТипIf("ОписаниеОповещения") И 
		(ТипЗнч(Оповещение.Модуль) = ТипЗнч(ЭтаФорма) ИЛИ ТипЗнч(Оповещение.Модуль) = ТипIf("Форма")) Тогда
		ТаФорма = Оповещение.Модуль; // указан - как модуль описания оповещения закрытия формы
	ИначеЕсли ТипЗнч(ВладелецФормы) = ТипЗнч(ЭтаФорма) ИЛИ ТипЗнч(ВладелецФормы) = ТипIf("Форма") Тогда
		ТаФорма = ВладелецФормы;     // указан - как владелец формы
	ИначеЕсли ВладелецФормы <> Неопределено Тогда
		// попытаемся определить по владельцу формы (элементу управления) 
		Попытка
			РодительЭУ = ВладелецФормы.Родитель;
		Исключение
			РодительЭУ = Null;
		КонецПопытки;
		Если РодительЭУ = Null Тогда
			// если владелец формы - ЭУ обычного интерфейса, то
			//      определить форму-владельца диалога не получится
		Иначе
			// если владелец формы - ЭУ управляемого интерфейса
			//      пройдемся по цепочке родителей подчиненных ЭУ, 
			//      пока не выйдем на управляемую форму
			Пока Истина Цикл
				Если ТипЗнч(РодительЭУ) = ТипIf("УправляемаяФорма") Тогда
					ТаФорма = РодительЭУ;
					Прервать;
				КонецЕсли;
				Попытка
					РодительЭУ = РодительЭУ.Родитель;
				Исключение
					Прервать;
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;
	ИмяРекв = СокрЛП(ТипыВВидеДереваИмяРеквизита);
	ТочкаУ = Найти(ИмяРекв, ".");
	Если ТочкаУ = 0 Тогда
		// сохраняем непоредственно в реквизите формы 
		ТотОбъект = ТаФорма;
	Иначе
		// сохраняем в атрибуте объекта в реквизите формы 
		Попытка
			ТотОбъект = ТаФорма[Лев(ИмяРекв,ТочкаУ-1)];
		Исключение
			ТотОбъект = Неопределено;
		КонецПопытки;
		ИмяРекв = Сред(ИмяРекв,ТочкаУ+1);
	КонецЕсли;
	Возврат ТаФорма;
КонецФункции

&НаКлиенте
Процедура ФормаКонтрольТипыВВидеДерева()
	// доступность кнопок развертывания/свертывания узлов групп типов в списке
	Элементы.ДеревоТиповРедактированиеСвернутьРазвернуть.Доступность = (ТипыВВидеДерева = 1);
	Элементы.ДеревоТиповРедактированиеПоискСвернутьРазвернуть.Доступность = (ТипыВВидеДерева = 1);
	Элементы.ДеревоТиповВыборСвернутьРазвернуть.Доступность = (ТипыВВидеДерева = 1);
	Элементы.ДеревоТиповВыборПоискСвернутьРазвернуть.Доступность = (ТипыВВидеДерева = 1);
	
	// пометка кнопок в подменю смены представления списка типов
	Элементы.ТаблицаТиповРедактированиеТипыВВидеДерева1.Пометка = (ТипыВВидеДерева = 1);
	Элементы.ТаблицаТиповРедактированиеТипыВВидеДерева2.Пометка = (ТипыВВидеДерева = 2);
	Элементы.ТаблицаТиповРедактированиеТипыВВидеДерева0.Пометка = (ТипыВВидеДерева = 0);
	Элементы.ТаблицаТиповВыборТипыВВидеДерева1.Пометка = (ТипыВВидеДерева = 1);
	Элементы.ТаблицаТиповВыборТипыВВидеДерева2.Пометка = (ТипыВВидеДерева = 2);
	Элементы.ТаблицаТиповВыборТипыВВидеДерева0.Пометка = (ТипыВВидеДерева = 0);
	
	Элементы.ДеревоТиповРедактированиеТипыВВидеДерева1.Пометка = (ТипыВВидеДерева = 1);
	Элементы.ДеревоТиповРедактированиеТипыВВидеДерева2.Пометка = (ТипыВВидеДерева = 2);
	Элементы.ДеревоТиповРедактированиеТипыВВидеДерева0.Пометка = (ТипыВВидеДерева = 0);	
	Элементы.ДеревоТиповВыборТипыВВидеДерева1.Пометка = (ТипыВВидеДерева = 1);
	Элементы.ДеревоТиповВыборТипыВВидеДерева2.Пометка = (ТипыВВидеДерева = 2);
	Элементы.ДеревоТиповВыборТипыВВидеДерева0.Пометка = (ТипыВВидеДерева = 0);

	Элементы.ДеревоТиповРедактированиеПоискТипыВВидеДерева1.Пометка = (ТипыВВидеДерева = 1);
	Элементы.ДеревоТиповРедактированиеПоискТипыВВидеДерева2.Пометка = (ТипыВВидеДерева = 2);
	Элементы.ДеревоТиповРедактированиеПоискТипыВВидеДерева0.Пометка = (ТипыВВидеДерева = 0);
	Элементы.ДеревоТиповВыборПоискТипыВВидеДерева1.Пометка = (ТипыВВидеДерева = 1);
	Элементы.ДеревоТиповВыборПоискТипыВВидеДерева2.Пометка = (ТипыВВидеДерева = 2);
	Элементы.ДеревоТиповВыборПоискТипыВВидеДерева0.Пометка = (ТипыВВидеДерева = 0);
КонецПроцедуры

&НаКлиенте
Процедура ТипыВВидеДереваПриИзменении(ЭлементТФС,ЭлементТФП,РеквизитТ)
	Перем ТекущиеТипыОтмеченные,ТекущийТип;
	
	// определяем текущий элемент списка типов
	Если ДеревоТиповРежимПоиска = 0 Тогда
		ЭлементТФ = ЭлементТФС;
		РеквизитФ = РеквизитТ;
	Иначе
		ЭлементТФ = ЭлементТФП;
		РеквизитФ = ДеревоТиповПоиск;
	КонецЕсли;
	
	// определяем тип в текущей строке в списке типов
	ТекущаяСтрока = ЭлементТФ.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = РеквизитФ.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ЭтоГруппа = Истина И ТипыВВидеДерева = 1 Тогда
				// для групповой строки - возьмем тип из первой подчиненной ее строки
				СтрокиГруппы = ТекущиеДанные.ПолучитьСтроки();
				Если СтрокиГруппы.Количество() > 0 Тогда
					ТекущийТип = СтрокиГруппы[0].Тип;
				КонецЕсли;
			Иначе
				// для простой строки - возьмем тип из нее самой
				ТекущийТип = ТекущиеДанные.Тип;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// определяем текущие отмеченные типы в списке типов
	Если РежимВыбораТипаДанных = Истина Тогда
		ТекущиеТипыОтмеченные = Неопределено;
	Иначе
		ТекущиеТипыОтмеченные = РедактируемыйТипПолучить();
	КонецЕсли;
	
	// перезаполняем список типов согласно выбранного представления
	ЭтаФормаИнит(Ложь, ТекущиеТипыОтмеченные);
	
	// определяем новый элемент списка типов (после смены представления)
	ЭлементТФС1 = Неопределено;
	ЭлементТФП1 = Неопределено;
	РеквизитТ1 = Неопределено;
	СписокТиповЭлементРеквизитОпределить(ЭлементТФС1,ЭлементТФП1,РеквизитТ1);
	Если ДеревоТиповРежимПоиска = 0 Тогда
		ЭлементТФ = ЭлементТФС1;
		РеквизитФ = РеквизитТ1;
	Иначе
		ЭлементТФ = ЭлементТФП1;
		РеквизитФ = ДеревоТиповПоиск;
	КонецЕсли;
	
	// восстанливаем результаты поиска по строке в списке типов
	Если ДеревоТиповРежимПоиска = 1 И Не ПустаяСтрока(СтрокаПоиска) Тогда
		ДеревоТиповОбновитьПоиск_Режим1(СтрокаПоиска,СтрокаПоиска0);
	ИначеЕсли ДеревоТиповРежимПоиска = 2 Тогда
		ДеревоТиповОбновитьПоиск_Режим2();
	Иначе
		СбросПоискаВыполнить();
	КонецЕсли; 
	ФормаКонтрольДеревоТиповРежимПоискаКлиент(Ложь);
	
	// восстановим текущую строку по определенному ранее типу в текущей строке списка 
	Если ТекущийТип <> Неопределено Тогда
		Если ТипыВВидеДерева > 0 ИЛИ ДеревоТиповРежимПоиска > 0 Тогда
			ДЗИндекс = ?(ДеревоТиповРежимПоиска=0,ДеревоТиповИндекс,ДеревоТиповПоискИндекс);
		КонецЕсли; 
		ТекущаяСтрока = ДеревоТиповНайтиСтроку(РеквизитФ,ДЗИндекс,,Новый Структура("Тип",ТекущийТип));
		Если ТекущаяСтрока <> Неопределено  Тогда
			ЭлементТФ.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли;
	
	// сохраняем выбранное значеие представления в настройках формы-владельца диалога
	Если Не ПустаяСтрока(ТипыВВидеДереваИмяРеквизита) Тогда
		// определим форму-владельца диалога
		ТотОбъект = Неопределено;
		ИмяРекв = "";
		ТаФорма = ОпределитьФормуВладельцаДиалога(ТотОбъект, ИмяРекв);
		// молча (без сообщений об ошибках) 
		// сохраним выбранное значение представления в реквизит формы-владелца диалога с указанным именем
		// ответственность за сохранение/восстановление представления возлагается на форму-владельца
		Если ТаФорма <> Неопределено И ТотОбъект <> Неопределено И Не ПустаяСтрока(ИмяРекв) Тогда
			Успешно = Истина;
			Попытка
				ТотОбъект[ИмяРекв] = ТипыВВидеДерева;
			Исключение
				Успешно = Ложь;
			КонецПопытки;
			Если Успешно = Истина Тогда
				// еше и оповестим владельца диалога для полноты счастья
				Оповестить("EditType.ТипыВВидеДерева.Смена", ТипыВВидеДерева, ТаФорма);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если РежимВыбораТипаДанных = Истина Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска2;
	Иначе
		ЭтаФорма.ТекущийЭлемент = Элементы.СтрокаПоиска1;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоТиповТипыВВидеДереваХ(ТипыВВидеДереваХ)
	Перем ЭлементТФС,ЭлементТФП,РеквизитТ;
	// переключить представление списка типов к выбранному значению
	Если ТипыВВидеДерева <> ТипыВВидеДереваХ Тогда
		СписокТиповЭлементРеквизитОпределить(ЭлементТФС,ЭлементТФП,РеквизитТ);
		ТипыВВидеДерева = ТипыВВидеДереваХ;
		ТипыВВидеДереваПриИзменении(ЭлементТФС,ЭлементТФП,РеквизитТ);
	КонецЕсли;
	ФормаКонтрольТипыВВидеДерева();
КонецПроцедуры

&НаКлиенте
Процедура СписокТипов_ТипыВВидеДерева1(Команда)
	// переключить представление списка типов в "Многоуровневое дерево"
	ДеревоТиповТипыВВидеДереваХ(1);
КонецПроцедуры

&НаКлиенте
Процедура СписокТипов_ТипыВВидеДерева2(Команда)
	// переключить представление списка типов в "Одноуровневое дерево"
	ДеревоТиповТипыВВидеДереваХ(2);
КонецПроцедуры

&НаКлиенте
Процедура СписокТипов_ТипыВВидеДерева0(Команда)
	// переключить представление списка типов в "Одноуровневый список"
	ДеревоТиповТипыВВидеДереваХ(0);
КонецПроцедуры

&НаСервере
Процедура ПерезаписатьИспользуемыеТипы(ОписаниеТипов)
	РегистрыСведений.C2D_ТипыДанныхШаблонов.ПерезаписатьИспользуемыеТипы(ОписаниеТипов);
КонецПроцедуры


// инициализация ключа настроек формы
КлючНастроекФормы = "ОбщаяФорма.EditType";
ПоляНастроекФормы = "ПоказыватьИменаОбъектов,ИспользоватьДопОформление";

// инициализация ограничений на максимальную длину "ограниченных" типов, поддерживаемых в 1С
ЧислоДлинаМакс = 32;
СтрокаДлинаМакс = 1024;
BDДлинаМакс = 1024; // ??? установим равной максимальной длине "ограниченной" строки

// строка служебных сивловов в строке шаблона поиска
СтрокаПоискаСпецСимволы = "%_^[]-\";

// признак сушествования квалификаторов двоичных данных
ЕстьКвалификаторыBD = (ТипIf("КвалификаторыДвоичныхДанных") <> Null);

