#Если сервер или ВнешнееСоединение тогда
#Область ПрограммныйИнтерфейс
Функция ОбработатьВызов(СтруктураВходящихПараметров) Экспорт
	СтруктураОтвет = ЗаполнитьСтруктуруОтвета(Новый Структура("status", "success"),200);
	//Получим ссылку на метод
	СсылкаНаМетод = ПолучитьМетодПоСтруктуреПараметров(СтруктураВходящихПараметров);
	Если СсылкаНаМетод = Неопределено Тогда
		Возврат ЗаполнитьСтруктуруОтвета(,405); 
	КонецЕсли;
	Попытка
		Выполнить(СсылкаНаМетод.КодМетода);
	Исключение
	    ЗаполнитьСтруктуруОтвета(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),500);
	КонецПопытки;
		
	Возврат СтруктураОтвет;
КонецФункции

Процедура СоздатьВебхукиПоУмолчанию() экспорт
	Для каждого макет из Метаданные.Справочники.C2D_WebHooks.Макеты цикл
		ТекстJSON = Справочники.C2D_WebHooks.ПолучитьМакет(Макет.Имя).ПолучитьТекст();
		СтруктураМетода = C2D_ВзаимодействиеСApiСлужебный.ДесериализоватьJSON(ТекстJSON);
		Вебхук = СоздатьВебхукИзСтруктуры(СтруктураМетода);
	КонецЦикла;	
КонецПроцедуры	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ПолучитьМетодПоСтруктуреПараметров(СтруктураПараметров)
	СсылкаНаМетод = Неопределено;
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	C2D_WebHooks.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.C2D_WebHooks КАК C2D_WebHooks
	               |ГДЕ
	               |	C2D_WebHooks.ИмяМетода = &ИмяМетода
	               |	И C2D_WebHooks.HTTPМетод = &HTTPМетод";
	Запрос.УстановитьПараметр("ИмяМетода", СтруктураПараметров.ИмяМетода);
	Запрос.УстановитьПараметр("HTTPМетод", Перечисления.C2D_HttpМетоды[СтруктураПараметров.HTTPМетод]);
	
	Выборка = запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СсылкаНаМетод = Выборка.Ссылка;
	Иначе
		СсылкаНаМетод = СоздатьВебхукПоУмолчанию(СтруктураПараметров);
	КонецЕсли; 
	Возврат СсылкаНаМетод;		
КонецФункции

Функция ЗаполнитьСтруктуруОтвета(ДанныеОтвета=Неопределено, КодОтвета = 200)
	СтруктураОтвет = Новый Структура("КодОтвета, JsonОтвета");
	СтруктураОтвет.КодОтвета 	= КодОтвета; 
	СтруктураОтвет.JsonОтвета	= C2D_ВзаимодействиеСApiСлужебный.СериализоватьВJSON(ДанныеОтвета);
	Возврат СтруктураОтвет;
КонецФункции

Функция СоздатьВебхукПоУмолчанию(СтруктураПараметров)
	//Вебхуки "По умолчанию" хранятся в макетах в справочнике, это сделано из-за того, что нельзя создавать предопределенные элементы.(Имя макета должно соответствовать "<HttpМетод>_<ИмяМетода>" например: POST_Inbox) 
	Попытка
		ТекстJSON = Справочники.C2D_WebHooks.ПолучитьМакет(Строка(СтруктураПараметров.HTTPМетод)+"_"+Строка(СтруктураПараметров.ИмяМетода)).ПолучитьТекст();
	Исключение
	   //Может макета и нет, тогда и метода такого нет, так что спокойно возвращаем Неопределено
	   Возврат Неопределено;
	КонецПопытки;
	СтруктураМетода = C2D_ВзаимодействиеСApiСлужебный.ДесериализоватьJSON(ТекстJSON);
	//Создадим элемент справочника "По умолчанию."
	Возврат СоздатьВебхукИзСтруктуры(СтруктураМетода);
КонецФункции

Функция СоздатьВебхукИзСтруктуры(СтруктураМетода) Экспорт
	ИмяМетода = СтруктураМетода.получить("ИмяМетода");
	HTTPМетод = Перечисления.C2D_HttpМетоды[СтруктураМетода.получить("HTTPМетод")];
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	C2D_WebHooks.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.C2D_WebHooks КАК C2D_WebHooks
	               |ГДЕ
	               |	C2D_WebHooks.HTTPМетод = &HTTPМетод
	               |	И C2D_WebHooks.ИмяМетода = &ИмяМетода";
	Запрос.УстановитьПараметр("ИмяМетода", ИмяМетода);
	Запрос.УстановитьПараметр("HTTPМетод", HTTPМетод);
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() тогда
		Сообщение = новый СообщениеПользователю;
		Сообщение.Текст = "Webhook "+Строка(HTTPМетод)+"_"+ИмяМетода+" уже существует";
		Сообщение.Сообщить();
		Возврат неопределено;
	КонецЕсли;	
	ВебхукОбъект = Справочники.C2D_WebHooks.СоздатьЭлемент();
	ВебхукОбъект.ИмяМетода = ИмяМетода;
	ВебхукОбъект.HTTPМетод = HTTPМетод;
	ВебхукОбъект.Наименование = Строка(HTTPМетод)+"_"+ИмяМетода;
	ВебхукОбъект.Записать();
	Возврат ВебхукОбъект.Ссылка;
КонецФункции

#КонецОбласти
#КонецЕсли