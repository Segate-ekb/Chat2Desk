#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если не ЗначениеЗаполнено(Объект.КодМетода) Тогда
		Объект.КодМетода = "//Код выполняемый при вызове вебхука.
		|//Информация о запросе доступна в переменной ""СтруктураВходящихПараметров""
		|//В данной структуре:
		|//-ТелоЗапроса = десериализованный JSON тела запроса
		|//-ПараметрыЗапроса = Соответствие параметров запроса переданных при вызове в строке после /?
		|//Если вебхук должен возвращать результат, то он должен формироваться следующей строчкой:
		|// СтруктураОтвет = ЗаполнитьСтруктуруОтвета(ДанныеДляСериализацииJSON,КодОтвета);";
	КонецЕсли;
	ЗаполнитьСписокСобытий();
	ОбновитьДекорациюРегистрацииWebhook();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ИмяМетодаПриИзменении(Элемент)
	ОбновитьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура HttpМетодПриИзменении(Элемент)
	ОбновитьНаименование();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ЗарегистрироватьWebhook(Команда)
	ОповещениеПослеОтметкиТребуемыхСобытий = Новый ОписаниеОповещения("ПослеОтметкиТребуемыхСобытий", ЭтотОбъект);
	События.ПоказатьОтметкуЭлементов(ОповещениеПослеОтметкиТребуемыхСобытий,"Выберите события к которым привязать webhook");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	ОбновитьДанныеНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ПослеОтметкиТребуемыхСобытий(Элементы, Параметры) Экспорт
	Если Элементы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрано ни одного события процедура регистрации прервана.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьWebhookНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьWebhookНаСервере()
	 СтрукураПараметров = СформироватьСтрукуруПараметровЗапроса();
	 СоответствиеОтвет = C2D_ВзаимодействиеСApi.webhooks(СтрукураПараметров, ?(не ЗначениеЗаполнено(Объект.IDWebHook), "POST", "PUT"), СтрЗаменить(Объект.IDWebHook,символы.НПП,""));
	 Если СоответствиеОтвет.Получить("status") = "success" Тогда
	 	 Объект.IDWebHook = Формат(СоответствиеОтвет.Получить("data").Получить("id"), "ЧГ=0");
		 Записать();
		 ОбновитьДекорациюРегистрацииWebhook();
	 ИначеЕсли СоответствиеОтвет.Получить("status") = "error" тогда
		 Сообщение = Новый СообщениеПользователю;
		 Сообщение.Текст =СоответствиеОтвет.Получить("errors");
		 Сообщение.Сообщить();
	 КонецЕсли; 
 КонецПроцедуры
 
 &НаСервере
 Функция СформироватьСтрукуруПараметровЗапроса() 
		events = новый массив;
		Для каждого Событие Из События Цикл
			Если событие.Пометка Тогда
				events.Добавить(событие.Значение);
			КонецЕсли; 			
		КонецЦикла; 
		Если events.Количество() = 0 Тогда
			 ОписаниеОшибки = "Ошибка работы с Chat2Desk.
			|Не выбрано ни одного события процедура регистрации прервана.";
		КонецЕсли; 

	 Возврат новый структура("url, name, events",C2D_ВзаимодействиеСApiПовтИсп.ПолучитьСформированнуюСсылкуНаБазуСАвторизацией()+"/hs/c2d_add_webhook/v1/"+объект.ИмяМетода+"/", Объект.Наименование, events);
	 
 КонецФункции
 

&НаСервере
Процедура ОбновитьДекорациюРегистрацииWebhook()
	Если ЗначениеЗаполнено(Объект.IDWebHook) Тогда
		СоответствиеОтвет = C2D_ВзаимодействиеСApi.webhooks(,,СтрЗаменить(Объект.IDWebHook,символы.НПП,""));
		Если СоответствиеОтвет.Получить("status") = "success" Тогда
			МассивСобытий = СоответствиеОтвет.Получить("data").Получить("events");
			События.ЗаполнитьПометки(Ложь);
			Для каждого ЭлементМассива Из МассивСобытий Цикл
				Событие = События.НайтиПоЗначению(ЭлементМассива); 
				Если не событие = неопределено Тогда
					Событие.Пометка = Истина;
				КонецЕсли; 
			КонецЦикла;
			Элементы.КартинкаСтатус.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
			Элементы.НадписьСтатус.Заголовок = "webhook зарегистрирован!";
		ИначеЕсли СоответствиеОтвет.Получить("status") = "error" тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст =СоответствиеОтвет.Получить("errors");
			Сообщение.Сообщить();
		КонецЕсли;
		
	Иначе 
		Элементы.КартинкаСтатус.Картинка = БиблиотекаКартинок.ОформлениеЗнакКрест;
		Элементы.НадписьСтатус.Заголовок = "webhook не зарегистрирован!";
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСобытий()
	События.Очистить();
	События.добавить("inbox", "Входящее сообщение", Истина);
	События.добавить("outbox", "Исходящее сообщение", Истина);
	События.добавить("new_client", "Первое сообщение от нового клиента", Истина);
	События.добавить("add_tag_to_client", "Клиенту добавлен тег", Истина);
	События.добавить("add_tag_to_request", "Запросу добавлен тег", Истина);
	События.добавить("delete_tag_from_client", "У клиента удален тег", Истина);
	События.добавить("delete_tag_from_request", "У запроса удален тег", Истина);
	События.добавить("client_updated", "Данные клиента изменились", Истина);
	События.добавить("close_dialog", "Диалог закрыт", Истина);
	События.добавить("close_request", "Запрос закрыт", Истина);
	События.добавить("dialog_transferred", "Оператор диалога изменен", Истина);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	 ОбновитьДекорациюРегистрацииWebhook();
КонецПроцедуры

Процедура ОбновитьНаименование()
	Объект.Наименование = Строка(Объект.HTTPМетод)+"_"+Объект.ИмяМетода;
КонецПроцедуры
#КонецОбласти