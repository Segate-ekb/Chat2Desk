#Если сервер или ВнешнееСоединение тогда
#Область ПрограммныйИнтерфейс
Функция ЗарегистрироватьВебхук(Аккаунт) Экспорт
	

	СтруктураПараметровЗапроса = СформироватьСтрукуруПараметровЗапроса();
	СоответствиеОтвет = C2D_ВзаимодействиеСApi.webhooks(СтруктураПараметровЗапроса, ?(не ЗначениеЗаполнено(Аккаунт.IDWebHook), "POST", "PUT"), СтрЗаменить(Аккаунт.IDWebHook,символы.НПП,""));
	Если СоответствиеОтвет.Получить("status") = "success" Тогда
		ОбъектАккаунт = Аккаунт.получитьОбъект();
		ОбъектАккаунт.IDWebHook = Формат(СоответствиеОтвет.Получить("data").Получить("id"), "ЧГ=0");
		ОбъектАккаунт.Записать();
		Возврат истина;
	ИначеЕсли СоответствиеОтвет.Получить("status") = "error" тогда
		ТекстОшибки = C2D_ВзаимодействиеСApiСлужебный.СформироватьТекстОшибки(СоответствиеОтвет);
		Если СтрНайти(ТекстОшибки, "This url is already used") Тогда
			//Перерегистрация вебхука. Получим структуру
			Возврат  ПолучитьIDстарогоХукаПоUrl(Аккаунт, СтруктураПараметровЗапроса.url);
		Иначе
			Сообщение = Новый СообщениеПользователю;  			
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
			Возврат ложь;
		КонецЕсли; 
	КонецЕсли;
КонецФункции

Функция ПолучитьАккаунтПоУмолчанию() Экспорт
	Выборка = Справочники.C2D_Аккаунты.Выбрать();
	Если выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат неопределено;
	КонецЕсли; 
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция СформироватьСсылкуВебхука()
	
	Ссылка = C2D_ВзаимодействиеСApiПовтИсп.ПолучитьСформированнуюСсылкуНаБазуСАвторизацией()+"hs/c2d_basichook/";
	
	Возврат Ссылка;	
КонецФункции

Функция СформироватьСтрукуруПараметровЗапроса()
	events = новый массив;
	events.Добавить("inbox");
	events.Добавить("outbox");
	events.Добавить("new_client");
	events.Добавить("new_request");
	events.Добавить("close_dialog");
	events.Добавить("client_updated");
	events.Добавить("new_tag");
	events.Добавить("add_tag_to_client");
	events.Добавить("add_tag_to_request");
	events.Добавить("dialog_transferred");
	events.Добавить("delete_tag_from_client");
		
	Возврат новый структура("url, name, events",СформироватьСсылкуВебхука(), "BasicHook1c", events);
	 
КонецФункции

Функция ПолучитьИмяПользователяИБ(Пользователь)
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПользовательИБ.Имя;
КонецФункции

функция ВебхукЗарегистрирован(Аккаунт)
	Зарегистрирован = ложь;
	
	Если ЗначениеЗаполнено(Аккаунт.IDWebHook) Тогда
		СоответствиеОтвет = C2D_ВзаимодействиеСApi.webhooks(неопределено, "GET", СтрЗаменить(Аккаунт.IDWebHook,символы.НПП,""));
		Если СоответствиеОтвет.Получить("status") = "success" Тогда
			Зарегистрирован = истина;
		КонецЕсли;	 
	КонецЕсли; 
	Возврат Зарегистрирован;
КонецФункции

Функция ПолучитьIDстарогоХукаПоUrl(Аккаунт, ссылка)
	Успех = Ложь;
	СоответствиеОтвет = C2D_ВзаимодействиеСApi.webhooks(неопределено,"GET");
	Если СоответствиеОтвет.Получить("status") = "success" Тогда
		Для каждого информацияОВебХуке Из СоответствиеОтвет.получить("data") Цикл
			Если информацияОВебХуке.получить("url") = ссылка Тогда
				ОбъектДляЗаписи = Аккаунт.получитьОбъект();
				ОбъектДляЗаписи.IDWebHook =  информацияОВебХуке.Получить("id");
				ОбъектДляЗаписи.записать();
				Успех = истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	Возврат Успех;	
КонецФункции

#КонецОбласти
#КонецЕсли