////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для повторного использования. Установленно повт.Исп в рамках сеанса.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс
// Функция - Адрес сервера и порта api
//
// Параметры:
//  Аккаунт	 - СправочникСсылка.C2D_Аккаунты.
// 
// Возвращаемое значение:
//  Структура - Сервер	- Строка	- Адрес сервера api
//  Порт	- Число		- Порт сервера
//
Функция АдресСервераИПортаApi() Экспорт
	СтруктураАдреса = Новый Структура("Сервер, Порт");
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	C2D_Аккаунты.C2D_СерверApi КАК C2D_СерверApi,
	               |	C2D_Аккаунты.C2D_ПортСервераAPI КАК C2D_ПортСервераAPI
	               |ИЗ
	               |	Справочник.C2D_Аккаунты КАК C2D_Аккаунты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураАдреса.Сервер	= Выборка.C2D_СерверApi;
		СтруктураАдреса.Порт	= Выборка.C2D_ПортСервераAPI;	
	КонецЕсли; 
	Возврат СтруктураАдреса;
КонецФункции

// Функция - ТокенАвторизации
// 
// Параметры:
//  Аккаунт	 - СправочникСсылка.C2D_Аккаунты.
// 
// Возвращаемое значение:
//  Строка - Токен авторизации
//
Функция ТокенАвторизации() Экспорт
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	C2D_Аккаунты.C2D_AuthToken КАК C2D_AuthToken
	|ИЗ
	|	Справочник.C2D_Аккаунты КАК C2D_Аккаунты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		C2D_AuthToken	= Выборка.C2D_AuthToken;		
	Иначе
		C2D_AuthToken = "";
	КонецЕсли;
	Возврат C2D_AuthToken;	
КонецФункции

// Функция - СерверВебДоступа
// 
// Параметры:
//  Аккаунт	 - СправочникСсылка.C2D_Аккаунты.
// 
// Возвращаемое значение:
//  Строка - Адрес сервера на котором открываются web версии чатов
//
Функция СерверВебДоступа() Экспорт
	api_info = C2D_ВзаимодействиеСApi.api_info();
	МассивUrl = api_info.получить("data").получить("domain_urls");
	Если МассивUrl = Неопределено или МассивUrl.количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	Возврат МассивUrl[0];
КонецФункции

// Функция - АдресПубликации
// 
// Параметры:
//  Аккаунт	 - СправочникСсылка.C2D_Аккаунты.
// 
// Возвращаемое значение:
//  Строка - Адрес публикации БД
//
Функция АдресПубликации() Экспорт
	СтруктураВозврата = новый Структура("C2D_АдресПубликации, Пользователь, Пароль");
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	C2D_Аккаунты.C2D_АдресПубликации КАК C2D_АдресПубликации,
	               |	C2D_Аккаунты.ПользовательВебхука КАК Пользователь,
	               |	C2D_Аккаунты.Пароль КАК Пароль
	               |ИЗ
	               |	Справочник.C2D_Аккаунты КАК C2D_Аккаунты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		  СтруктураВозврата.C2D_АдресПубликации  = выборка.C2D_АдресПубликации;
		  СтруктураВозврата.Пользователь	=выборка.Пользователь;
 		  СтруктураВозврата.Пароль = выборка.Пароль;
		  
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции

Функция ПолучитьСформированнуюСсылкуНаБазуСАвторизацией() экспорт
	Ссылка = "";
	СтруктураПубликации = АдресПубликации();
	СтруктураАдреса = C2D_ВзаимодействиеСApiСлужебный.РазобратьАдресСайта(СтруктураПубликации.C2D_АдресПубликации);
	Если СтруктураАдреса.HTTPЗащищенноеСоединение Тогда
		Ссылка = "Https://";
	Иначе
		Ссылка = "Http://";
	КонецЕсли;
	
	Возврат Ссылка+ПолучитьИмяПользователяИБ(СтруктураПубликации.Пользователь)
					+":"+СтруктураПубликации.Пароль+"@"+СтруктураАдреса.HTTPСервер
						+?(ЗначениеЗаполнено(СтруктураАдреса.HTTPПорт), ":"+СтруктураАдреса.HTTPПорт,"")
							+"/"+СтруктураАдреса.HTTPАдресСкрипта+"/";	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ПолучитьИмяПользователяИБ(Пользователь)
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПользовательИБ.Имя;
КонецФункции
#КонецОбласти