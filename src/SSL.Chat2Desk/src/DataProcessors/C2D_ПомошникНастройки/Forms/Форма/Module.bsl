#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПодобратьАккаунтИЗаполнитьРеквизиты();
	ОпределитьВнешнююОбработку();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиАккаунта Тогда
		ПроверяемыеРеквизиты.добавить("Аккаунт.Наименование");
		ПроверяемыеРеквизиты.добавить("Аккаунт.C2D_AuthToken");
		ПроверяемыеРеквизиты.добавить("Аккаунт.C2D_ПортСервераAPI");
		ПроверяемыеРеквизиты.добавить("Аккаунт.C2D_СерверApi");
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыНастройкиАккаунта
&НаКлиенте
Процедура АккаунтC2D_AuthTokenПриИзменении(Элемент)
	ПроверитьРаботоспособностьАпи();
КонецПроцедуры

&НаКлиенте
Процедура C2D_СерверApiПриИзменении(Элемент)
	ПерезаполнитьПорт();
	ПроверитьРаботоспособностьАпи();
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПорт()
	Если не ЗначениеЗаполнено(аккаунт.C2D_ПортСервераAPI) или Аккаунт.C2D_ПортСервераAPI = 80 или аккаунт.C2D_ПортСервераAPI=443 Тогда
		Если стрНайти(НРег(аккаунт.C2D_СерверApi), "http://")>0 Тогда
			  Аккаунт.C2D_ПортСервераAPI = 80;
		  иначе
			  Аккаунт.C2D_ПортСервераAPI = 443;
		КонецЕсли; 		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура C2D_ПортСервераAPIПриИзменении(Элемент)
	ПроверитьРаботоспособностьАпи();
КонецПроцедуры

&НаКлиенте
Процедура C2D_ПортСервераAPIНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОСменеПорта", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Обычно используется именно этот порт. Вы уверенны, что хотите его сменить?",РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

&НаКлиенте
Процедура C2D_АдресПубликацииПриИзменении(Элемент)
	ПроверитьРаботоспособностьВебхука();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	ПроверитьРаботоспособностьВебхука();
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	ПроверитьРаботоспособностьВебхука();
КонецПроцедуры

&НаКлиенте
Процедура НадписьВнешняяОбработкаНажатие(Элемент)
	Если не ВнешняяОбработка.Пустая() Тогда
		ПоказатьЗначение(,ВнешняяОбработка);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОбУстановкеОбработки", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Будет выполнена установка обработки для выполнения регламентов. Продолжить?",РежимДиалогаВопрос.ДаНет, 60);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыСписокОператоров
&НаКлиенте
Процедура СписокОператоровПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СписокОператоров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПользовательТекущейСтроки = ТекущиеДанные.Пользователь;
КонецПроцедуры

&НаКлиенте
Процедура ПользовательТекущейСтрокиПриИзменении(Элемент)
	ОбновитьПользователя(Элементы.СписокОператоров.текущиеДанные.id,ПользовательТекущейСтроки);
	Элементы.СписокКлиентов.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СопоставленоОтборОператорыПриИзменении(Элемент)
	ОбработатьОтборЗаписейСопоставления("СписокОператоров", "Пользователь", СопоставленоОтборОператоры);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКлиентов
&НаКлиенте
Процедура СопоставленоОтборКлиентыПриИзменении(Элемент)
	ОбработатьОтборЗаписейСопоставления("СписокКлиентов", "Клиент", СопоставленоОтборКлиенты);
КонецПроцедуры

&НаКлиенте
Процедура СписокКлиентовПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СписокКлиентов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
 КлиентТекущейСтроки = НайтиКлиентаСервер(ТекущиеДанные.Клиент);
КонецПроцедуры

&НаКлиенте
Процедура КлиентТекущейСтрокиПриИзменении(Элемент)
	ОбновитьКлиента(Элементы.СписокКлиентов.текущиеДанные.id,КлиентТекущейСтроки);
	Элементы.СписокКлиентов.Обновить();
КонецПроцедуры
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПриступитьКНастройке(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкиАккаунта;
	Элементы.ПерейтиКСопоставлениюОператоров.КнопкаПоУмолчанию = истина;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСопоставлениюОператоров(Команда)
	//Проверим досутп к апи и перезапишем аккаунт
	Если не АпиНастроенКорректно Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось установить соединение! 
		|Прежде чем перейти к следующему этапу, проверьте настройки соединения!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ПерезаписатьДанныеАккаунта();
	
	//проверим публикацию, Если все ок, то зарегистрируем вебхук 
	Если не АдресПубликацииНастроен Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Адрес публикации базы не настроен корректно! 
		|Прежде чем перейти к следующему этапу, настройте публикацию базы, иначе вы не сможете получать оповещения!";
		Сообщение.Поле = "аккаунт.C2D_АдресПубликации";
		Сообщение.Сообщить();
		Возврат;	 
	КонецЕсли;
	Если не ВебхукЗарегистрирован() Тогда
		//Что-то пошло не так. читаем ошибки разбираемся
		Возврат;
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОДлительномОбновлении", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Сейчас будет выполнено первоначальное заполнение всех справочников. Это может занять длительное время.",РежимДиалогаВопрос.ОК, 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСопоставлениюКлиентов(Команда)
	ОписаниеОповещения = новый ОписаниеОповещения("ПослеВводаТиповКлиентов", ЭтотОбъект);
	Если ОграничениеТиповКлиентовУстановлено() Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,истина);
	Иначе
		ОткрытьФорму("РегистрСведений.C2D_ТипыКлиентов.ФормаСписка",,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЧатКлиент(Команда)
	ОткрытьФорму("ОбщаяФорма.ЧатКлиент");
	ЭтаФорма.Закрыть();
	УстановитьПризнакЗавершенностиНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуПомошника(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗавершении", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Настройка не завершена! Вы верены, что хотите выйти?",РежимДиалогаВопрос.ДаНет, 60);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКИ(Команда)
	ЗаполнитьПоКИНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаНастройкиАккаунта
&НаСервере
Процедура ПодобратьАккаунтИЗаполнитьРеквизиты()
	Выборка = Справочники.C2D_Аккаунты.Выбрать();
	Если выборка.Следующий() Тогда
		ЗначениеВДанныеФормы(выборка.Ссылка.ПолучитьОбъект(),аккаунт);
		Если ЗначениеЗаполнено(Аккаунт.C2D_AuthToken) Тогда
			ПроверитьРаботоспособностьАпи();
		КонецЕсли;
		Если ЗначениеЗаполнено(Аккаунт.C2D_АдресПубликации) Тогда
			ПроверитьРаботоспособностьВебхука();
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОпределитьВнешнююОбработку()
	Запрос = новый запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка,
	              |	ДополнительныеОтчетыИОбработки.ВерсияДанных КАК ВерсияДанных
	              |ИЗ
	              |	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	              |ГДЕ
	              |	ДополнительныеОтчетыИОбработки.Наименование = &Наименование
	              |	И ДополнительныеОтчетыИОбработки.ИмяОбъекта = &ИмяОбъекта
	              |	И ДополнительныеОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Наименование", "Работа с Chat2Desk");
	Запрос.УстановитьПараметр("ИмяОбъекта", "РаботаСChat2Desk");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВнешняяОбработка = выборка.Ссылка;
		Элементы.НадписьВнешняяОбработка.Заголовок = "Внешняя обработка установлена.";  
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СравнениеВерсий(Версия, ПроверяемаяВерсия)

	Если Не ЗначениеЗаполнено(Версия) Тогда
		Возврат -1;
	КонецЕсли;
	
	МассивВерсия = СтрРазделить(Версия, ".");
	МассивПроверяемаяВерсия = СтрРазделить(ПроверяемаяВерсия, ".");

	Результат = 0;
	Для Счетчик = 0 По МассивПроверяемаяВерсия.ВГраница() Цикл
		
		Если Число(МассивВерсия[Счетчик]) > Число(МассивПроверяемаяВерсия[Счетчик]) Тогда
			
			Результат = 1; 
			Прервать;
			
		ИначеЕсли Число(МассивВерсия[Счетчик]) < Число(МассивПроверяемаяВерсия[Счетчик]) Тогда
			
			Результат = -1;
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ПерезаписатьДанныеАккаунта()
	ОбъектАккаунт = ДанныеФормыВЗначение(аккаунт, тип("СправочникОбъект.C2D_Аккаунты"));
	ОбъектАккаунт.Записать();
	ЗначениеВДанныеФормы(ОбъектАккаунт,аккаунт);
КонецПроцедуры

&НаСервере
Функция ВебхукЗарегистрирован()
	Возврат Справочники.C2D_Аккаунты.ЗарегистрироватьВебхук(Аккаунт.Ссылка);
КонецФункции

&НаСервере
Процедура ПроверитьРаботоспособностьАпи()
	Элементы.ДекорацияСтатусПодключения.Видимость = истина;
	Попытка
		api_info = ОтправитьТестовыйЗапросКАпи();
		Если api_info.получить("status") = "success" Тогда
			Элементы.ДекорацияСтатусПодключения.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
			АпиНастроенКорректно = истина;
		Иначе
			Элементы.ДекорацияСтатусПодключения.Картинка = БиблиотекаКартинок.ОформлениеЗнакКрест;
			АпиНастроенКорректно = ложь;
		КонецЕсли;
	Исключение
		Элементы.ДекорацияСтатусПодключения.Картинка = БиблиотекаКартинок.ОформлениеЗнакКрест;
		АпиНастроенКорректно = ложь;
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Функция ОтправитьТестовыйЗапросКАпи()
	СтруктураСервера = C2D_ВзаимодействиеСApiСлужебный.РазобратьАдресСайта(Аккаунт.C2D_СерверApi);
	СоединениеHTTP = Новый HTTPСоединение(СтруктураСервера.HTTPСервер, Аккаунт.C2D_ПортСервераAPI, "", "",,,?(СтруктураСервера.HTTPЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(),неопределено));
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", Аккаунт.C2D_AuthToken);
	ЗапросHTTP = Новый HTTPЗапрос( СтруктураСервера.HTTPАдресСкрипта+"/v1/companies/api_info", Заголовки);
	Результат = СоединениеHTTP.Получить(ЗапросHTTP);
	РезультатСтрокой = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	возврат C2D_ВзаимодействиеСApiСлужебный.ДесериализоватьJSON(РезультатСтрокой);
КонецФункции

&НаСервере
Процедура ПроверитьРаботоспособностьВебхука()
	АдресПубликацииНастроен = ложь;
	Попытка
		КодСостояния = ВебхукДоступенПоАдресу();
		Если КодСостояния= 200 Тогда
			Элементы.ДекорацияСтатусПубликации.Картинка = БиблиотекаКартинок.ОформлениеЗнакФлажок;
			АдресПубликацииНастроен = истина;
		ИначеЕсли КодСостояния = 401 Тогда 
			Элементы.ДекорацияСтатусПубликации.Картинка = БиблиотекаКартинок.ОформлениеЗнакВоcклицательныйЗнак;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "403: доступ запрещен. Проверьте логин и пароль";
			Сообщение.Поле = "аккаунт.Пароль"; 
			Сообщение.Сообщить();
		Иначе
			Элементы.ДекорацияСтатусПубликации.Картинка = БиблиотекаКартинок.ОформлениеЗнакКрест;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка: "+КодСостояния;
			Сообщение.Поле = "аккаунт.C2D_АдресПубликации"; 
			Сообщение.Сообщить();
		КонецЕсли;
	Исключение
		Элементы.ДекорацияСтатусПубликации.Картинка = БиблиотекаКартинок.ОформлениеЗнакКрест;
	КонецПопытки;	
КонецПроцедуры

&НаСервере
Функция ВебхукДоступенПоАдресу()
	СтруктураАдреса = C2D_ВзаимодействиеСApiСлужебный.РазобратьАдресСайта(Аккаунт.C2D_АдресПубликации);
	ИмяПользователя = ПолучитьИмяПользователяИБ(Аккаунт.ПользовательВебхука);
	СоединениеHTTP = Новый HTTPСоединение(СтруктураАдреса.HTTPСервер,СтруктураАдреса.HTTPПорт , ИмяПользователя,Аккаунт.Пароль ,,, ?(СтруктураАдреса.HTTPЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(),неопределено));
	ЗапросHTTP = Новый HTTPЗапрос(СтруктураАдреса.HTTPАдресСкрипта+"/hs/c2d_basichook/");
	Результат = СоединениеHTTP.Получить(ЗапросHTTP);
	Возврат Результат.КодСостояния;
КонецФункции

&НаСервере
Функция ПолучитьИмяПользователяИБ(Пользователь)
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ПользовательИБ.Имя;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницыСписокОператоров
&НаСервереБезКонтекста
Процедура ОбновитьПользователя(id, Пользователь)
	Запись = РегистрыСведений.C2D_Операторы.СоздатьМенеджерЗаписи();
	Запись.id = id;
	Запись.Прочитать();
	Если не Запись.Пользователь = Пользователь Тогда
		запись.Пользователь = Пользователь;
		Запись.Записать();	
	КонецЕсли; 	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницыСписокКлиентов
&НаСервереБезКонтекста
Процедура ОбновитьКлиента(id, Клиент)
	Запись = РегистрыСведений.C2D_Клиенты.СоздатьМенеджерЗаписи();
	Запись.id = id;
	Запись.Прочитать();
	Если не Запись.Клиент = Клиент Тогда
		Если не ЗначениеЗаполнено(Клиент) Тогда
			запись.Клиент = неопределено;
			Запись.ПолноеИмяТипаДанных = "";
		Иначе
			запись.Клиент = Клиент.УникальныйИдентификатор();
			Запись.ПолноеИмяТипаДанных =  клиент.Метаданные().полноеИмя();
		КонецЕсли;
		Запись.Представление = РегистрыСведений.C2D_Клиенты.СформироватьПредставление(Запись);
		Запись.Записать();	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоКИНаСервере()
	РегистрыСведений.C2D_Клиенты.выполнитьПоискКлиентовПоКИВБазе();
	Элементы.СписокКлиентов.Обновить();	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаТиповКлиентов(Результат, ДопПараметры) Экспорт
	  Если ОграничениеТиповКлиентовУстановлено() Тогда
	  	  Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСопоставлениеКлиентов;
			Элементы.ОткрытьЧатКлиент.КнопкаПоУмолчанию = истина;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не выбран ни один тип с которым можно сопоставить клиентов! Продолжение невозможно!";
			Сообщение.Сообщить();
		КонецЕсли; 
КонецПроцедуры


&НаСервере
Функция ОграничениеТиповКлиентовУстановлено()
	ОписаниеТиповКлиентов = РегистрыСведений.C2D_ТипыКлиентов.ПолучитьТипыДанных();
	Если ЗначениеЗаполнено(ОписаниеТиповКлиентов) Тогда
		 элементы.КлиентТекущейСтроки.ОграничениеТипа = ОписаниеТиповКлиентов;
		 Возврат истина;
	 Иначе
		Возврат Ложь; 
	КонецЕсли; 
КонецФункции


&НаСервере
Функция НайтиКлиентаСервер(Guid)
	Возврат РегистрыСведений.C2D_Клиенты.НайтиСсылкуПоGUID(Guid);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ОбработатьОтборЗаписейСопоставления(ИмяСписка, ИмяПоля, Отбор)
	
	Если Отбор = "Сопоставленные" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Этаформа[ИмяСписка], ИмяПоля,,ВидСравненияКомпоновкиДанных.Заполнено,,Истина);
	ИначеЕсли Отбор = "Несопоставленные" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Этаформа[ИмяСписка], ИмяПоля,,ВидСравненияКомпоновкиДанных.НеЗаполнено,,Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Этаформа[ИмяСписка], ИмяПоля,,,,Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт		
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если не Аккаунт.НастройкаЗавершена Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОСледующемЗапуске", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, "Возобновить работу мастера при следующем запуске программы?",РежимДиалогаВопрос.ДаНет, 60);
		Иначе
			ЭтаФорма.Закрыть();
		КонецЕсли; 	
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОСледующемЗапуске(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		УстановитьПризнакЗавершенностиНастройки();
	КонецЕсли; 
	ЭтаФорма.Закрыть();
КонецПроцедуры


&НаКлиенте
Процедура ПослеОтветаНаВопросОСменеПорта(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаПорта", ЭтотОбъект);
		ПоказатьВводЧисла(ОписаниеОповещения, аккаунт.C2D_ПортСервераAPI, "Введите номер порта", 10,0);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПорта(Результат, ДополнительныеПараметры) экспорт
	Если НЕ Результат = Неопределено Тогда
        Аккаунт.C2D_ПортСервераAPI= Результат;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбУстановкеОбработки(РезультатВопроса, ДополнительныеПараметры) Экспорт			
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УстановитьВнешнююОбработкуИзМакета();	
	КонецЕсли; 			
КонецПроцедуры

&НаСервере
Процедура УстановитьВнешнююОбработкуИзМакета()
	АдресВХ = ПоместитьВоВременноеХранилище(Обработки.C2D_ПомошникНастройки.ПолучитьМакет("РаботаСChat2Desk"));
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Успех", Ложь);
	ПараметрыРегистрации.Вставить("АдресДанныхОбработки", АдресВХ);
	ПараметрыРегистрации.Вставить("ОтключатьПубликацию", Ложь);
	ПараметрыРегистрации.Вставить("ОтключатьКонфликтующие", Истина);
	ПараметрыРегистрации.Вставить("Конфликтующие", Новый СписокЗначений);
	ПараметрыРегистрации.Вставить("ЭтоОтчет", Ложь);
	ПараметрыРегистрации.Вставить("ИмяФайла", "РаботаСChat2Desk.epf");
	
	Если ВнешняяОбработка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		СправочникОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
	Иначе 
		СправочникОбъект = ВнешняяОбработка.получитьОбъект();
	КонецЕсли;
	
	СправочникОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВХ));
	СправочникОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	
	Результат = ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(СправочникОбъект, ПараметрыРегистрации);
	СправочникОбъект.Записать();
	УстановитьРасписаниеДляВнешнейОбработки(СправочникОбъект.ссылка);
	
	ОпределитьВнешнююОбработку();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьРасписаниеДляВнешнейОбработки(Ссылка)
	ОбъектДопОбработки =ссылка.получитьОбъект();
	Для каждого Команда Из ОбъектДопОбработки.Команды Цикл	
		Параметры = Новый массив;
		Параметры.Добавить(ссылка);
		Параметры.добавить(Команда.Идентификатор);
		
		Расписание = новый РасписаниеРегламентногоЗадания;
		расписание.ВремяНачала = Дата("00010101010000");
		расписание.ПериодПовтораДней= 1;
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
		ПараметрыЗадания.Вставить("Использование", Ложь);
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
		Изменения = Новый структура("Использование, Наименование, Параметры, Расписание", Истина, (СокрЛП(ссылка.Вид)
		+ ": "
		+ СокрЛП(ссылка.Наименование)
		+ " / "
		+ НСтр("ru = 'Команда'")
		+ ": "
		+ СокрЛП(Команда.Представление)), Параметры, Расписание);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Изменения);
		Команда.РегламентноеЗаданиеGUID = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	КонецЦикла;
	ОбъектДопОбработки.записать();
КонецПроцедуры



&НаКлиенте
Процедура ПослеВопросаОДлительномОбновлении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗапуститьФоновоеЗаполнениеПервоначальнойИнформации();
	КонецЕсли; 	
КонецПроцедуры


&НаКлиенте
Процедура ЗапуститьФоновоеЗаполнениеПервоначальнойИнформации()
	//Обновление начиначется с диалогов, потом операторы и клиенты
	ДлительнаяОперация = НачатьОбновлениеДиалоговВФоне();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеЗавершенияОбновленияДиалогов",ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция НачатьОбновлениеДиалоговВФоне()
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("РегистрыСведений.C2D_Диалоги.ОбновитьСписокДиалоговВФоне", , ПараметрыВыполнения);
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияОбновленияДиалогов(Результат, ДополнительныеПараметры) Экспорт	
	ДлительнаяОперация = НачатьОбновлениеОператоровВФоне();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеЗавершенияОбновленияОператоров",ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,Оповещение , ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция НачатьОбновлениеОператоровВФоне()
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("РегистрыСведений.C2D_Операторы.ОбновитьСписокОператоровВФоне", , ПараметрыВыполнения);
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияОбновленияОператоров(Результат, ДополнительныеПараметры) Экспорт
	ДлительнаяОперация = НачатьОбновлениеКлиентовВФоне();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеЗавершенияОбновленияКлиентов",ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
КонецПроцедуры

&НаСервере
Функция НачатьОбновлениеКлиентовВФоне()
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("РегистрыСведений.C2D_Клиенты.ОбновитьСписокКлиентовВФоне", , ПараметрыВыполнения);
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияОбновленияКлиентов(Результат, ДополнительныеПараметры) Экспорт
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСопоставлениеОператоров;
	Элементы.ПерейтиКСопоставлениюКлиентов.КнопкаПоУмолчанию = истина; 
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакЗавершенностиНастройки()
	Если Не ЗначениеЗаполнено(Аккаунт.Ссылка) Тогда
		//Создадим Фиктивный аккаунт, с ровно одним заполненым полем
		ОбъектАккаунт = справочники.C2D_Аккаунты.СоздатьЭлемент();
	иначе
		ОбъектАккаунт = Аккаунт.Ссылка.ПолучитьОбъект();
	КонецЕсли; 
	
	ОбъектАккаунт.НастройкаЗавершена = истина;
	ОбъектАккаунт.записать();
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияЧтоТакоеПубликацияНажатие(Элемент)
	ЗапуститьПриложение("https://1cdevelopers.ru/?p=184");
КонецПроцедуры
#КонецОбласти
